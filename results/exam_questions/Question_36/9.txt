Question: We define a zig-zag array, for which there exist some indices \( n \leq j \leq i \leq 1 \) such that all elements in the array between 1 and \( i \) are in increasing order, all elements between \( i \) and \( j \) are in decreasing order, and all elements between \( j \) and \( n \) are in increasing order. We call \( i \) the peak element and \( j \) the valley element. 

Provide upper and lower bounds for the problem: Input: Array. Output: Returns TRUE if the array is a zig-zag array.
3o-mini: We can show that any algorithm which decides whether an array is a zig‐zag array must examine at least a linear number of elements (in the worst case) and that an algorithm exists that does this in linear time.

Let’s briefly explain why.

Definition Recap:
Assume we have an array A[1…n] and we say it is “zig‑zag” if there exist indices 1 ≤ i ≤ j ≤ n such that:
 • A[1] up to A[i] is in strictly increasing order (so A[1] < A[2] < … < A[i]),
 • A[i] down to A[j] is in strictly decreasing order (so A[i] > A[i+1] > … > A[j]), and
 • A[j] up to A[n] is in strictly increasing order (so A[j] < A[j+1] < … < A[n]).
Here, A[i] is the peak element, and A[j] is the valley element.

Upper Bound (O(n)):
A straightforward approach is to scan the array once, using three phases:
 1. Start at index 1 and check while the sequence is increasing.
 2. When the first drop is encountered, mark this point as the peak (i) and check that the sequence is strictly decreasing.
 3. When the sequence stops decreasing, mark that as the valley (j) and verify that the rest of the array is strictly increasing.
Each phase runs in O(n) time in the worst case (summing up to at most one pass over the array). Thus, an algorithm exists that runs in O(n) time.

Lower Bound (Ω(n)):
In the worst-case the “zig‐zag” property might hold (or not) only near the end of the array and because the decision is based on comparing consecutive elements, any algorithm would have to check nearly every element. Thus, no algorithm can be guaranteed to decide the property without examining Ω(n) elements. In the worst-case, you have to make roughly n − 1 comparisons.

Final Conclusion:
The time complexity of the zig‐zag recognition problem is tightly bounded by Θ(n); that is, one can decide the property in worst-case O(n) time, and the nature of the problem forces a lower bound of Ω(n) comparisons.

Therefore, the upper bound is O(n) and the lower bound is Ω(n).