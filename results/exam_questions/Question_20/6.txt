Question: Describe a data structure whose elements are pairs of keys \( (a, b) \) that supports the following operations (where \( n \) is the number of key pairs currently in the data structure, and it can be assumed that all the key pairs are distinct):

\begin{itemize}
    \item \texttt{Insert(a, b)} – Adds the key pair \( (a, b) \) to the data structure. The operation should be performed in \( O(\log n) \) time.
    \item \texttt{Delete(a, b)} – Deletes the key pair \( (a, b) \). The operation should be performed in \( O(\log n) \) time.
    \item \texttt{Search(a, b)} – Returns the key pair \( (a, b) \) if it exists, otherwise returns null. The operation should be performed in \( O(\log n) \) time.
    \item \texttt{successor(a, b)} – Returns \( (a, b^*) \) where \( b^* \) is defined as follows: let \( b_1, b_2, b_3, \dots, b_m \) be all the keys such that the pair \( (a, b_i) \) exists in the data structure (for \( 1 \leq i \leq m \)) and is sorted in ascending order. Then, \( b^* \) is the key to the right of \( b \) in the sorted list. If there is no key to the right of \( b \) in the sorted list, return null. The operation should be performed in \( O(\log n) \) time.
\end{itemize}
3o-mini: One correct solution is to use a two‐level data structure. At the top level, maintain a balanced binary search tree (BST) keyed on the first coordinate a. Each node in this top-level tree contains a secondary balanced BST that stores all the b–values corresponding to that a. (Any balanced BST—such as an AVL tree or a red–black tree—will work.)

Here’s how each operation can be implemented:

1. Insert(a, b):
   • Search the top–level BST for key a, which takes O(log p) time where p is the number of distinct a–values (and since p ≤ n, this is O(log n)).
   • If a is found, insert b into the secondary BST associated with a. Since the secondary BST might store up to n elements (in the worst case), this insertion takes O(log n) time.
   • If a is not found, create a new secondary BST, insert b into it, and add a new node with key a to the top–level BST. This also takes O(log n) time.

2. Delete(a, b):
   • First, search for a in the top–level BST (O(log n)).
   • Next, search for b in the secondary BST of a (O(log n)) and remove it.
   • If, after deletion, the secondary BST becomes empty, remove the node for a from the top–level BST, which again is O(log n).
   • Overall, the time is O(log n).

3. Search(a, b):
   • First, use the top–level BST to find a (O(log n)).
   • Then, search in the secondary BST for b (O(log n)).
   • Thus, the total time is O(log n).

4. successor(a, b):
   • The definition is: with all b–values such that (a, b) exists, sorted in ascending order, return the key that comes immediately after the given b.
   • First, locate the node for a in the top–level BST (O(log n)).
   • Then, in the secondary BST, perform the standard “successor” query for b: that is, find the smallest key larger than b. In a balanced BST, this can be done in O(log n) time.
   • If b is the largest in the secondary BST, the operation returns null.
   • Thus, the entire operation is O(log n).

Since each of these operations requires at most two BST searches/updates (one in the top level and one in the secondary BST), the overall complexity for each operation is O(log n).

This two–level approach is an effective way to manage pairs (a, b) when you want fast insertion, deletion, search, and also need to perform a “successor” query on the second component for a fixed first component.