Question: Describe a data structure whose elements are pairs of keys \( (a, b) \) that supports the following operations (where \( n \) is the number of key pairs currently in the data structure, and it can be assumed that all the key pairs are distinct):

\begin{itemize}
    \item \texttt{Insert(a, b)} – Adds the key pair \( (a, b) \) to the data structure. The operation should be performed in \( O(\log n) \) time.
    \item \texttt{Delete(a, b)} – Deletes the key pair \( (a, b) \). The operation should be performed in \( O(\log n) \) time.
    \item \texttt{Search(a, b)} – Returns the key pair \( (a, b) \) if it exists, otherwise returns null. The operation should be performed in \( O(\log n) \) time.
    \item \texttt{successor(a, b)} – Returns \( (a, b^*) \) where \( b^* \) is defined as follows: let \( b_1, b_2, b_3, \dots, b_m \) be all the keys such that the pair \( (a, b_i) \) exists in the data structure (for \( 1 \leq i \leq m \)) and is sorted in ascending order. Then, \( b^* \) is the key to the right of \( b \) in the sorted list. If there is no key to the right of \( b \) in the sorted list, return null. The operation should be performed in \( O(\log n) \) time.
\end{itemize}
3o-mini: We can achieve the required operations in O(log n) time per operation by “splitting” the two keys into two levels. One good solution is as follows:

1. Maintain an outer balanced binary search tree (for example, a red–black tree or AVL tree) keyed on a.
2. At each node (with key a) of this outer tree, store an inner balanced binary search tree (again, e.g. a red–black tree) that contains the second keys b corresponding to that particular a.

Using this structure, the operations are implemented as follows:

• Insert(a, b):
 – First, search for the key a in the outer tree. This takes O(log n) time (n is the total number of key pairs, but note that the number of distinct a values is at most n).
 – If a is not present, create a new inner BST for a.
 – Insert b into the inner BST. Since the number of elements in the inner BST is at most n, this also takes O(log n) time.
Thus the overall time is O(log n).

• Delete(a, b):
 – Locate the outer node with key a (O(log n)).
 – In its inner BST, delete b (O(log n)).
 – If after deletion the inner BST becomes empty, delete the node for a from the outer BST.
Again, the overall cost is O(log n).

• Search(a, b):
 – Look up a in the outer BST (O(log n)).
 – If found, search for b in the associated inner BST (O(log n)).
If b is found, return (a, b); otherwise return null. So the overall time is O(log n).

• successor(a, b):
 – First, locate the outer node with key a (O(log n)).
 – In the inner BST, perform a standard “successor” operation (i.e. find the smallest element b′ that is greater than b in that BST). This operation can be done in O(log n) time.
 – If such a b′ exists, return (a, b′); otherwise return null.
Thus, the overall time is O(log n).

This two-level data structure ensures that each operation takes logarithmic time relative to the total number of key pairs currently stored.