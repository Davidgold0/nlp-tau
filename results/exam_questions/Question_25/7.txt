Question: Given an array with $n$ numbers.

\textbf{B.} Describe a deterministic algorithm with time complexity $O(n \log n)$ that returns the number of distinct elements in the array. Prove your answer.
3o-mini: We can solve the problem using the following algorithm:

1. Sort the array using a deterministic sorting algorithm (like merge sort or heap sort). This step takes O(n log n) time, since these algorithms have worst-case deterministic time bounds.

2. Initialize a counter, say distinctCount, to 0.

3. Traverse the sorted array from the start:
   a. For the first element, increment distinctCount.
   b. For every subsequent element, compare it to the previous element. If the current element is different, increment distinctCount.

4. Return distinctCount.

Proof:

• The sorting step takes O(n log n) time.

• The scanning step involves one pass through the n elements, taking O(n) time.

Thus, the overall time complexity is O(n log n) + O(n) = O(n log n).

Because our algorithm always sorts and then counts the distinct elements, it deterministically returns the correct number of distinct elements in the array.