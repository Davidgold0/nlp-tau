Question: In B-trees with a minimum degree \( d \) (where each internal node has between \( d \) and \( 2d \) children), the amount of information stored in the leaves is smaller because there is no need to store child pointers. Assume that a disk block is large enough to hold a node at its maximum size and that each node is stored in a separate disk block.

To take advantage of the free space in the disk block containing a leaf, we modify the definition of the tree and set that each leaf will contain between \( 2d-1 \) and \( 4d-1 \) elements, instead of between \( d-1 \) and \( 2d-1 \). It is given that the size of an element is equivalent to the size of a pointer, so such an enlarged leaf still fits in a block. As long as the tree has no more than \( 4d \) elements, the tree consists of a single enlarged leaf.

This is called a B-tree with enlarged leaves. Briefly describe a top-down insertion algorithm (the algorithm does not modify the tree after the element is inserted into the appropriate leaf, only during the search) for a B-tree with enlarged leaves as described above.
3o-mini: We can solve the problem by “pre‐splitting” any node that might become overfull before we descend into it. (In other words, the only modifications to the tree occur on the way down—not after reaching the leaf—and we split nodes that are “full” even before the new key is inserted.) The key observation is that in a B–tree with minimum degree d the rules are as follows:

• Each internal node (other than the root) has between d and 2d children (and therefore between d–1 and 2d–1 keys).  
• In the B–tree with enlarged leaves, each leaf has between 2d–1 and 4d–1 keys (instead of between d–1 and 2d–1).

Because each node is stored in one disk block (with room for the “maximum‐size” node) we have room in a leaf to store up to 4d–1 keys.

The idea is to guarantee that when we finally reach the leaf where the new element is to be inserted, that leaf is not “full” (i.e. does not already contain 4d–1 keys). We do this by “looking ahead” and splitting any child that is full (whether it’s an internal node or an enlarged leaf) before descending into it.

Below is an outline of one acceptable top–down insertion algorithm:

–––––––––––––––––––––––––––––––––––
Algorithm INSERT(key, T):

1. If the root T is full (that is, if T is an internal node with 2d children or, if T is a leaf, if it already has 4d–1 keys), then
  a. Allocate a new node R.
  b. Set R as the new root and make its only child the old root T.
  c. Split the appropriate child of R (i.e. split T) so that R now has two children.
  d. (After the split, the invariant holds that the node you will visit next is not full.)

2. Set x ← root.

3. While x is not a leaf do:
  a. Determine the appropriate child pointer x.child[i] so that key should be inserted into the subtree rooted at this child.
  b. If x.child[i] is full (that is,
    – if x.child[i] is an internal node, it has exactly 2d children (and 2d–1 keys), or 
    – if x.child[i] is a leaf it has 4d–1 keys),
    then split x.child[i]. This splitting operation is done exactly as in the standard B–tree algorithm:
     i. Create a new node z.
     ii. Partition the keys (and the children, if any) of x.child[i] into two nodes so that each new node satisfies the “minimum” property. (For a full internal node, the split puts d children in the left node and d in the right, and for a full enlarged leaf with 4d–1 keys, the split gives two leaves each with 2d–1 keys.)
     iii. Insert the median key into x, and update x’s child pointers.
  c. After the split, re‐determine the correct index i (since the split may have moved keys between children).
  d. Set x ← x.child[i].

4. (At this point x is a leaf and, by construction, x is not full.)
  Insert key into x in the correct sorted order.

–––––––––––––––––––––––––––––––––––
How the Splitting Works:

The only twist is that when splitting a leaf, we want to “evenly” divide its keys so that both resulting nodes satisfy the property that they have at least 2d–1 keys (which is the minimum for an enlarged leaf). For example, if a leaf is full (has exactly 4d–1 keys), then a proper split might leave each new leaf with exactly 2d–1 keys. The split for internal nodes is exactly as in the standard B–tree insertion algorithm (where the full node has 2d children, and the split gives two nodes each with d children).

Note that by doing all these splits on the way down (a “lookahead” or top–down approach), we guarantee that the leaf we end up at is not full, and thus we can insert the new key directly without the need for any further modifications to the tree on the way back up.

–––––––––––––––––––––––––––––––––––
In summary:

• Start at the root.
• Whenever you are about to descend to a child pointer, check if the child is full (for an internal node: has 2d children; for a leaf: has 4d–1 keys).
• If it is full, split it so that the child is replaced by two nodes, and adjust the parent accordingly.
• Continue descending until you reach the appropriate leaf.
• Insert the key into this leaf (which is guaranteed not to be full because of the lookahead splitting).

This is the required “top–down” insertion procedure for a B–tree with enlarged leaves.