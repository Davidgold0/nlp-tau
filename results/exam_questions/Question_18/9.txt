Question: Given \( n \) pairs of keys \( (a_1, b_1), (a_2, b_2), \dots, (a_n, b_n) \), where each key \( a_i \) and each key \( b_j \) (for \( 1 \leq i,j \leq n \)) are integers in the range \([1, 10n]\), describe a data structure that can be built in Worst-case time \( O(n) \) (given \( n \) key pairs) and supports the following operation in Worst-case time \( O(1) \):

\texttt{SearchAll(a)} – returns a list of all key pairs for which \( a \) is the left key.
3o-mini: We can achieve the desired performance by “bucketing” the key pairs by their left key. Since the left keys are in the range [1, 10n], we can create an array (or “direct‐address table”) of size O(n) whose indices correspond directly to possible left keys and store with each index a linked list (or vector/array) of the key pairs that have that left key. Here is more detail:

1. Data Structure:
   • Create an array T[1…10n] where each entry T[a] will be a pointer (or reference) to a list of those pairs (a, b).
   • The lists can be implemented as linked lists or dynamic arrays. (If you want to avoid any hidden overheads, you can also preallocate one large array and use counting sort ideas, as described later.)

2. Build Process (O(n) worst-case):
   • Initialize the array T[1…10n] with empty lists.
   • For each given pair (a, b) (a in [1,10n]), perform:
   T[a].append((a, b))
     Since each pair is processed in O(1) and there are n pairs, the total cost is O(n).

3. Query Operation – SearchAll(a) (O(1) worst-case):
   • To search for all pairs that have left key a, simply return the list stored at T[a].
   • Since accessing an array element is O(1), the search is O(1) worst-case; the cost to actually “report” all the pairs may depend on the number of returned pairs, but the pointer lookup itself is constant time.

Alternative (Counting Sort style):
Another common method is to use a two‐phase counting sort approach:
   1. Create an auxiliary count array Count[1…10n] that counts how many pairs have each left key.
   2. Compute a prefix sum array Off[1…10n] so that Off[a] gives the starting index in a new array Sorted[] where all pairs with left key a will be stored.
   3. Place each pair into Sorted[] at its correct position.
   4. Now, SearchAll(a) can return the subarray Sorted[Off[a] … Off[a]+Count[a]-1] in O(1) time.
   
Both approaches yield O(n) worst-case preprocessing time and O(1) worst-case search time (not counting the time to output the list, which is proportional to the list’s size).

Thus, the data structure that uses an array of buckets (indexed directly by the left key) meets the specifications.