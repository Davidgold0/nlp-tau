Question: We build a hashing table of size \( m \) using the open addressing method (i.e., all the elements are in the hashing table without using pointers). We use a randomly chosen hash function of the form \( h(k, i) \), where \( k \) is the key that we want to insert into the table, and \( i \) is the probe number. (This is the uniform probing method. The value returned by calling \( h(k, i) \) is a uniformly chosen integer between 2 and \( m-1 \), independent of the previous random selections). The table already contains \( n \) distinct elements. We now perform a search for an element that is not in the table. What is the expected number of table slots examined during the search? Provide as tight a non-asymptotic answer as possible.
3o-mini: We are given a hash table with m slots containing n elements (so there are m – n empty slots), and we use open addressing with a uniformly random probe sequence. When searching for an element that is not in the table, we examine slots one by one in the order given by h(k, i), where each h(k, i) is chosen uniformly at random from the m available slots (or, as stated, from 2 to m – 1; the details of the numbering do not affect the analysis). Importantly, the probe values are chosen independently at random.

Because the probes are independent and the table is fixed, the probability that any given probe lands in an empty slot is (m – n)/m. (Note that when searching for an element not in the table any slot that is empty is a "successful" termination of the search.)

We now have a sequence of independent trials where each trial has a "success" probability p = (m – n)/m. In a geometric experiment of this type, the expected number of trials until the first success (including the trial on which the success occurs) is given by

  E[number of probes] = 1/p = m/(m – n).

Thus, the expected number of table slots examined during the search is exactly m/(m – n).