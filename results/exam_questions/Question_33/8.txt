Question: We build a hashing table of size \( m \) using the open addressing method (i.e., all the elements are in the hashing table without using pointers). We use a randomly chosen hash function of the form \( h(k, i) \), where \( k \) is the key that we want to insert into the table, and \( i \) is the probe number. (This is the uniform probing method. The value returned by calling \( h(k, i) \) is a uniformly chosen integer between 2 and \( m-1 \), independent of the previous random selections). The table already contains \( n \) distinct elements. We now perform a search for an element that is not in the table. What is the expected number of table slots examined during the search? Provide as tight a non-asymptotic answer as possible.
3o-mini: We can analyze the search as follows.

Assume that the table has m slots and n of these slots contain elements (with n distinct keys). When searching for an element that is not in the table, the search algorithm examines slots according to the probe sequence generated by h(k, i). In our case, each probe h(k, i) returns a slot number that is uniformly randomly chosen from the set {2, 3, …, m – 1}. (The exact details of why we start at 2 do not change the analysis, since what matters is that the probe slots are chosen uniformly at random from the table slots and independently for each probe.)

Since there are n occupied slots out of m slots, the probability that a randomly chosen slot (i.e. a randomly chosen probe) is occupied is

  n/m,

and the probability that it is empty is

  (m – n)/m.

When performing an unsuccessful search (for an element that is not in the table), the search will check one slot after the other until an empty slot is found.

Thus, the number of probes until an empty slot is encountered is a geometric random variable with “success” probability p = (m – n)/m. (Here “success” means we find an empty slot where the element is not present.)

For a geometric random variable with parameter p, the expected number of trials (probes) is 1/p. Therefore, the expected number of slots examined during the search is

  E[# slots examined] = 1/[(m – n)/m] = m/(m – n).

We can also express this in terms of the load factor α = n/m as

  Expected probes = 1/(1 – α).

Thus, the expected number of table slots examined during the unsuccessful search is exactly m/(m – n), which is a tight, non-asymptotic answer.