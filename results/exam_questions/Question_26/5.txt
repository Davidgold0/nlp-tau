Question: Given a collection of sets $s_1, s_2, \dots, s_m$.

Describe a data structure that supports the following operations:

\begin{itemize}
    \item \texttt{MakeItem(i) $\gets$ A} – Create the item $A$ that holds the number $i$.
    \item \texttt{Insert(j, A)} – Insert the item $A$ into set $S_j$ (it is assumed that the set $S_j$ exists).
    \item \texttt{Delete(j, A)} – Delete the item $A$ from set $S_j$ (it is assumed that the set $S_j$ exists).
    \item \texttt{FindMin(j)} – Return the minimum item from set $S_j$ (it is assumed that the set $S_j$ exists).
    \item \texttt{CreateSet(j, Arr)} – Build the set $j$ from an unsorted array of numbers.
    \item \texttt{FindMin()} – Return the minimum item among all items in the sets $s_1, s_2, \dots, s_m$.
\end{itemize}

All operations, except for \texttt{CreateSet}, should run in $O(\log n)$ time, where $n$ is the total number of items in sets $s_1, s_2, \dots, s_m$. The \texttt{CreateSet} operation should run in linear time relative to the size of the input array.
Teacher: Let's start by breaking down the problem together. We have a collection of sets s₁, s₂, …, sₘ, and we need a data structure that supports several operations—all in O(log n) time (except CreateSet, which is linear). 

A high-level idea is to manage two separate data structures: one for handling operations within a single set (like inserting an item, deleting an item, or finding the minimum within a set), and another to keep track of the overall minimum among all sets.

To outline our approach, we need to consider:

1. A way to represent each individual set so that Insert, Delete, and FindMin within that set run in O(log n) time.
2. A mechanism to quickly access and update the global minimum across all sets when individual sets change.

Let’s start with the first part.

Step 1: Think about an appropriate data structure for each set sⱼ. Which data structure would let you efficiently perform basic operations like insert, delete, and find the minimum in O(log n) time? 

Please solve this step by telling me which data structure you would use for an individual set and why it fits the time constraints.
Student: For the individual sets \( S_j \), I would use a **balanced binary search tree (BST)**, such as a Red-Black Tree or an AVL Tree. 

The reason for choosing a balanced BST is that it allows us to perform the required operations—Insert, Delete, and FindMin—in \( O(\log n) \) time. Here's how each operation would work with a balanced BST:

1. **Insert(j, A)**: Inserting an item into a balanced BST takes \( O(\log n) \) time because the tree maintains its balance after each insertion.
2. **Delete(j, A)**: Deleting an item from a balanced BST also takes \( O(\log n) \) time, as the tree will readjust itself to remain balanced after the deletion.
3. **FindMin(j)**: Finding the minimum item in a balanced BST can be done in \( O(\log n) \) time by traversing the leftmost path of the tree.

Using a balanced BST ensures that all operations on individual sets are efficient and meet the time complexity requirements. 

Now, could you guide me on how we can manage the global minimum across all sets?
Teacher: You've done a great job outlining an efficient choice for the individual sets using balanced BSTs. Now let's think about how to maintain the global minimum across all the sets. We need to quickly determine the smallest item among the minima of each set and update this quickly when a set's minimum changes.

Step 2: What kind of data structure would you use to efficiently maintain and update this global minimum information? Please describe your choice and explain how it would support operations like updating a set’s minimum and performing a global FindMin in O(log n) time.
Student: Student: To efficiently maintain and update the global minimum across all sets, I would use a **min-heap** (or priority queue). The min-heap will allow us to keep track of the minimum elements from each set, which will help us efficiently perform the global FindMin operation.

Here's how the min-heap would work in this context:

1. **Structure**: Each entry in the min-heap would consist of a tuple containing the minimum element of each set and a reference to the corresponding set. This way, we can quickly access the minimum of each set.

2. **Global FindMin()**: The operation to find the minimum across all sets can be done in \( O(1) \) time by simply returning the root of the min-heap, which is the smallest item among the minimums of each set.

3. **Updating the Global Minimum**:
   - When we perform an operation that potentially changes the minimum of a set (like Delete), we need to check if the deleted item was the minimum of that set.
   - If it was, we would need to re-calculate the new minimum for that set, update the entry in the min-heap, and then re-heapify to maintain the heap property. This update operation would take \( O(\log m) \) time, where \( m \) is the number of sets.
   - If we insert a new item into a set, we would also check if it becomes the new minimum and update the min-heap accordingly.

4. **Insert and Delete Operations**: 
   - The Insert operation for a set would involve adding the item to the corresponding balanced BST and checking if it is the new minimum. If so, we would update the min-heap.
   - The Delete operation would involve removing the item from the balanced BST and checking if the deleted item was the minimum, leading to an update in the min-heap if necessary.

By using a min-heap alongside the balanced BSTs for individual sets, we can efficiently manage the global minimum while ensuring that all operations conform to the required time complexities.

Now, would you like me to summarize how all operations would work together in this data structure?
Teacher: Great work on explaining the use of a min-heap for tracking the minimum elements across individual sets!

Now, let's move on to the next step. We need to consider how to build a set efficiently using the unsorted array given in the CreateSet(j, Arr) operation. Remember, our goal for CreateSet is to build the set in linear time relative to the size of the array.

Step 3: Please describe how you would implement the CreateSet(j, Arr) operation. How would you use the unsorted array to build the individual set (using the balanced BST that you mentioned earlier) in linear time? Take your time to consider how to maintain the overall time complexity requirement, and share your approach for creating the set.
Student: To implement the `CreateSet(j, Arr)` operation efficiently in linear time, we can take advantage of the properties of the balanced binary search tree (BST) we previously discussed. Here's how I would approach this:

### CreateSet(j, Arr) Implementation

1. **Initialization**: First, we need to initialize the balanced BST for the set \( S_j \). This will be our data structure to hold the items from the array \( Arr \).

2. **Bulk Insertion**: Instead of inserting each element from the array \( Arr \) one by one into the BST (which would take \( O(n \log n) \) time), we can use a technique that allows us to build the BST in a more efficient manner. 

   - **Building a Balanced BST**: 
     - We can first sort the array \( Arr \). Sorting takes \( O(n \log n) \) time, but we can also consider a different approach.
     - If we directly insert each element into the BST, we can take advantage of the properties of balanced BSTs. However, to achieve linear time complexity, we can also utilize a method that involves creating a balanced BST from the sorted array in \( O(n) \) time.
     - This can be done by recursively choosing the middle element of the array as the root and then recursively applying the same process to the left and right halves of the array to construct the left and right subtrees.

3. **Maintaining Global Minimum**: After constructing the set \( S_j \), we will also need to insert the minimum of this new set into the min-heap that tracks the global minimum. This can be done in \( O(\log m) \) time, where \( m \) is the number of sets.

### Summary of Steps for CreateSet(j, Arr)

- **Step 1**: Initialize a new balanced BST for set \( S_j \).
- **Step 2**: Sort the array \( Arr \) (if we choose this method) or directly insert elements into the BST while maintaining balance.
- **Step 3**: If using the sorted array method, recursively build a balanced BST from the sorted array in \( O(n) \).
- **Step 4**: After the BST is built, find the minimum element of this set and insert it into the min-heap in \( O(\log m) \).

### Time Complexity

- The overall time complexity for `CreateSet(j, Arr)` will be \( O(n) \) if we construct the BST from the sorted array as described, or if we directly insert using a balanced BST, we can still aim for \( O(n) \) in a well-implemented scenario.
- The subsequent insertion of the minimum into the min-heap is \( O(\log m) \), but this is a small overhead compared to the linear construction of the set.

With this approach, we can efficiently create a new set from an unsorted array while adhering to the required time complexity constraints. 

Would you like to go over how all operations work together with this data structure, or is there any specific aspect you'd like to discuss further?
Teacher: Great work on describing the CreateSet operation in detail! I appreciate how you've explained building the BST efficiently and then updating the global minimum.

Now, let’s move on to the next step. We need to integrate all the pieces we discussed—the use of balanced BSTs for individual sets, the min-heap for tracking each set’s minimum, and the efficient CreateSet procedure—into a single data structure that supports all the operations.

Step 4: Please outline how all the operations (MakeItem, Insert, Delete, FindMin for a single set, CreateSet, and global FindMin) work together in this integrated data structure. How do the balanced BSTs and the min-heap interact, and how do you ensure that each operation meets the required time constraints?

Take your time to provide an overall plan that incorporates all the ideas. Let me know your integrated approach, and we’ll go over it step by step!
Student: To integrate all the operations into a cohesive data structure, we will utilize balanced binary search trees (BSTs) for individual sets and a min-heap to maintain the global minimum. Here's how each operation will work together within this integrated structure:

### Integrated Data Structure Overview

1. **Data Structure Components**:
   - **Balanced BSTs**: Each set \( S_j \) will be represented by a balanced BST, allowing efficient operations within the set.
   - **Min-Heap**: A min-heap will store the minimum elements from each set, enabling quick access to the global minimum.

### Operations

1. **MakeItem(i)**:
   - This operation creates an item \( A \) that holds the number \( i \).
   - **Time Complexity**: \( O(1) \) since we are just creating a new item.

2. **Insert(j, A)**:
   - Insert the item \( A \) into the set \( S_j \) (the balanced BST).
   - If \( A \) is less than the current minimum of \( S_j \), update the min-heap accordingly.
   - **Time Complexity**: \( O(\log n) \) for the insertion into the BST and \( O(\log m) \) for updating the min-heap if necessary.

3. **Delete(j, A)**:
   - Delete the item \( A \) from the set \( S_j \).
   - Check if \( A \) was the minimum of \( S_j \). If it was, recalculate the new minimum for the set and update the min-heap.
   - **Time Complexity**: \( O(\log n) \) for deletion from the BST and \( O(\log m) \) for updating the min-heap if necessary.

4. **FindMin(j)**:
   - Return the minimum item from set \( S_j \) by retrieving the minimum from the balanced BST.
   - **Time Complexity**: \( O(\log n) \) since we traverse to the leftmost node in the BST.

5. **CreateSet(j, Arr)**:
   - Initialize a new balanced BST for set \( S_j \).
   - Build the BST from the unsorted array \( Arr \) in linear time \( O(n) \) using the recursive method described earlier.
   - After the BST is built, find the minimum element and insert it into the min-heap.
   - **Time Complexity**: \( O(n) \) for building the BST and \( O(\log m) \) for inserting the minimum into the min-heap.

6. **FindMin()**:
   - Return the minimum item among all items in the sets \( S_1, S_2, \dots, S_m \) by simply accessing the root of the min-heap.
   - **Time Complexity**: \( O(1) \) since the min-heap allows direct access to the minimum.

### Interaction Between Components

- **Balanced BSTs**: Each set maintains its own minimum, and all operations (Insert, Delete, FindMin) are handled efficiently within the individual BSTs.
- **Min-Heap**: The min-heap tracks the minimum of each set, allowing us to quickly find the overall minimum. Whenever a set's minimum changes (due to an insert or delete operation), we update the corresponding entry in the min-heap.

### Summary

By using balanced BSTs for individual sets and a min-heap for global minimum tracking, we ensure that all operations meet the required time complexities:
- \( O(\log n) \) for operations on individual sets (Insert, Delete, FindMin).
- \( O(n) \) for CreateSet.
- \( O(1) \) for retrieving the global minimum.

This integrated approach efficiently supports all specified operations while maintaining the necessary performance guarantees. Would you like to discuss any specific part of this integrated structure further or clarify any details?
Teacher: That’s a great integrated plan outlining how the balanced BSTs and the min-heap work together! I appreciate how you detailed each operation and explained the interaction between the two main components.

Now, let’s ensure we fully understand one of the more delicate operations. We want to be especially clear about how the Delete operation is handled because this is where the global minimum might change.

Step 5: Could you now focus specifically on the Delete(j, A) operation? Please describe in detail the steps you would take when deleting an item from set Sⱼ. In particular, explain how you would check if this deletion affects the set’s minimum and how you would update the min-heap accordingly. 

Take your time and share your step-by-step reasoning for handling Delete in this integrated structure.
Student: To handle the `Delete(j, A)` operation effectively within our integrated data structure, we need to follow a series of steps to ensure that we properly manage the deletion from the balanced BST and update the min-heap if necessary. Here’s a detailed breakdown of the process:

### Steps for Delete(j, A)

1. **Locate Item A in Set S_j**:
   - First, we need to search for the item \( A \) in the balanced BST representing set \( S_j \). This operation will take \( O(\log n) \) time.
   - If \( A \) is not found, we can simply return, as there is nothing to delete.

2. **Check if A is the Minimum**:
   - Before performing the deletion, we check if \( A \) is the minimum element of the BST. 
   - We can do this by comparing \( A \) with the minimum value maintained in the BST (which can be accessed in \( O(1) \) time, since we can keep a pointer/reference to the minimum node).
   - If \( A \) is the minimum, we need to update the minimum for the set after the deletion.

3. **Delete A from the BST**:
   - Perform the deletion of \( A \) from the balanced BST. This operation will take \( O(\log n) \) time as the tree will need to maintain its balance after the deletion.
   - After the deletion, if \( A \) was not the minimum, we can skip to step 6.

4. **Recalculate the Minimum (if A was the Minimum)**:
   - If \( A \) was the minimum, we need to find the new minimum for the set \( S_j \). This can be done by traversing to the leftmost node in the BST, which represents the new minimum.
   - This operation will also take \( O(\log n) \) time.

5. **Update the Min-Heap**:
   - Once we have identified the new minimum for set \( S_j \), we need to update the corresponding entry in the min-heap.
   - To do this, we first remove the old minimum (which was \( A \)) from the min-heap. This operation will take \( O(\log m) \) time.
   - Then, we insert the new minimum into the min-heap. This also takes \( O(\log m) \) time.

6. **Maintain the Min-Heap Property**:
   - After inserting the new minimum, we need to ensure that the min-heap maintains its properties. This is automatically handled during the insertion operation.

### Summary of Time Complexity for Delete(j, A)

- Searching for \( A \) in the BST: \( O(\log n) \)
- Checking if \( A \) is the minimum: \( O(1) \)
- Deleting \( A \) from the BST: \( O(\log n) \)
- Finding the new minimum (if necessary): \( O(\log n) \)
- Updating the min-heap (removing old minimum and inserting new minimum): \( O(\log m) + O(\log m) = O(\log m) \)

### Overall Complexity
The overall complexity for the `Delete(j, A)` operation remains dominated by the \( O(\log n) \) for BST operations and \( O(\log m) \) for min-heap updates, making it efficient and compliant with our time complexity requirements.

This careful handling of the `Delete` operation ensures that both the individual set and the global minimum are accurately maintained, allowing all operations to function smoothly within the integrated data structure. 

Would you like to discuss any other operations or aspects of the data structure further?
Teacher: You've provided a detailed and thoughtful explanation of the Delete(j, A) operation, and it's clear you understand how to update both the individual BST and the global min-heap properly. Before we move on, I’d like to ask a couple of clarifying questions to ensure we cover all nuances:

1. What would your procedure be if, after deletion, the BST for set Sⱼ becomes empty? How should the min-heap be updated in that case?
2. In your explanation, you mentioned a process to remove the old minimum from the min-heap and then insert a new one. Could you explain if there’s any way to streamline this update (for example, using a decrease-key operation if applicable) and under what conditions that might be useful?

Please take a moment to consider these questions, and then provide your revised explanation for the Delete operation that addresses these points.
Student: To address your clarifying questions regarding the `Delete(j, A)` operation, let's explore the scenarios when the BST for set \( S_j \) becomes empty and the potential for streamlining the min-heap update process.

### 1. Handling the Case When the BST Becomes Empty

If the deletion of item \( A \) results in the balanced BST for set \( S_j \) becoming empty, we need to take the following steps:

- **Check for Emptiness**: After performing the deletion, we should check if the BST is empty. This can be done by checking if the root node of the BST is `null` or if the size of the BST is zero.
  
- **Update the Min-Heap**: If the BST for \( S_j \) is empty, we must remove the reference to the minimum of this set from the min-heap. This means:
  - We will need to remove the entry corresponding to \( S_j \) from the min-heap. This operation will take \( O(\log m) \) time.
  - After removing the entry, we should ensure that the min-heap maintains its properties, which is handled automatically during the removal process.

### 2. Streamlining the Min-Heap Update

In the context of updating the min-heap after a deletion, we typically remove the old minimum and then insert the new minimum. However, if we have a situation where we know the new minimum is smaller than the previous minimum (for instance, if we are using a data structure that allows for a decrease-key operation), we could streamline the update process.

- **Decrease-Key Operation**: If we were to implement a priority queue that supports a decrease-key operation, we could simply decrease the value of the entry corresponding to the set \( S_j \) in the min-heap to reflect the new minimum instead of removing it and inserting a new entry. This would save us the overhead of removing and reinserting, which can be beneficial in certain scenarios.

- **Conditions for Using Decrease-Key**: The decrease-key operation would be most useful when:
  - We have a priority queue implementation that supports this operation efficiently (like a Fibonacci heap).
  - We are certain that the new minimum is indeed less than the old minimum and we want to avoid the overhead of two operations (removal and insertion).

### Revised Explanation for Delete(j, A)

Here’s how the `Delete(j, A)` operation would work incorporating these considerations:

1. **Locate Item A in Set S_j**: Search for \( A \) in the balanced BST. If not found, return.

2. **Check if A is the Minimum**:
   - If \( A \) is the minimum, proceed to step 3; otherwise, delete \( A \) and skip to step 6.

3. **Delete A from the BST**: Delete \( A \) from the BST, maintaining balance.

4. **Recalculate the Minimum**:
   - If the deletion results in the BST becoming empty, remove the corresponding entry from the min-heap and return.
   - If the BST is not empty, find the new minimum by traversing to the leftmost node.

5. **Update the Min-Heap**:
   - If \( S_j \) is empty, remove the old minimum from the min-heap.
   - If \( S_j \) is not empty and the new minimum is less than the old minimum, consider using a decrease-key operation if applicable. Otherwise, remove the old minimum and insert the new minimum.

6. **Maintain the Min-Heap Property**: Ensure the min-heap maintains its properties through the removal or insertion process.

### Summary of Time Complexity for Revised Delete(j, A)

- Searching for \( A \): \( O(\log n) \)
- Checking if \( A \) is the minimum: \( O(1) \)
- Deleting \( A \): \( O(\log n) \)
- Finding new minimum (if necessary): \( O(\log n) \)
- Updating the min-heap: \( O(\log m) \) for removal and insertion, or \( O(1) \) for decrease-key if applicable.

This comprehensive approach ensures that we handle the deletion process effectively, including the special cases of empty sets and potential optimizations in the min-heap updates. Would you like to explore any other areas or operations in this integrated data structure?
Teacher: You've done a very solid job refining the approach for Delete(j, A), considering both the case where the set becomes empty and where a decrease-key operation might be used to update the min-heap more efficiently. Let's summarize what we've established for the Delete operation:

1. First, we search the BST for Sⱼ for the item A.  
2. We check if A is the current minimum of Sⱼ.  
3. We delete A from the BST.  
4. If A was the minimum, we then:
  a. Check if the BST is now empty.  
    • If empty, remove Sⱼ’s entry from the min-heap.  
    • Otherwise, traverse to find the new minimum (the leftmost node in the BST).  
5. Update the min-heap:
  a. If possible, use a decrease-key operation to adjust the value quickly when the new minimum is smaller, or remove and reinsert the new minimum if decrease-key isn’t available.  
6. Ensure that after these steps both the BST and the min-heap continue to maintain their respective properties, keeping the overall operations within O(log n) for the BST changes and O(log m) for the heap updates.

Now that you've worked through the Delete operation, please provide your final integrated summary that covers all operations—MakeItem, Insert, Delete, FindMin for a single set, CreateSet, and global FindMin—and explains how the balanced BSTs and the min-heap work together to meet the time constraints. Once you give me your final integrated answer, we'll conclude the session.
Student: Certainly! Here’s the final integrated summary of the data structure and how it supports all required operations:

### Integrated Data Structure Overview

We will use a combination of balanced binary search trees (BSTs) for individual sets and a min-heap to maintain the global minimum across all sets. The balanced BST allows efficient operations within each set, while the min-heap provides quick access to the minimum among all sets.

### Operations Overview

1. **MakeItem(i)**:
   - **Description**: Create an item \( A \) that holds the number \( i \).
   - **Time Complexity**: \( O(1) \)

2. **Insert(j, A)**:
   - **Description**: Insert the item \( A \) into the set \( S_j \).
   - **Process**:
     - Insert \( A \) into the balanced BST for \( S_j \).
     - If \( A \) is less than the current minimum of \( S_j \), update the min-heap with the new minimum.
   - **Time Complexity**: \( O(\log n) \) for the BST insertion and \( O(\log m) \) for updating the min-heap if necessary.

3. **Delete(j, A)**:
   - **Description**: Delete the item \( A \) from the set \( S_j \).
   - **Process**:
     - Search for \( A \) in the balanced BST for \( S_j \).
     - If found, check if \( A \) is the minimum.
     - Delete \( A \) from the BST.
     - If \( A \) was the minimum, check if the BST is now empty:
       - If empty, remove the entry from the min-heap.
       - If not empty, find the new minimum.
     - Update the min-heap with the new minimum (using decrease-key if applicable, or remove and insert).
   - **Time Complexity**: \( O(\log n) \) for searching and deleting in the BST, \( O(\log m) \) for min-heap updates.

4. **FindMin(j)**:
   - **Description**: Return the minimum item from the set \( S_j \).
   - **Process**: Access the leftmost node in the balanced BST.
   - **Time Complexity**: \( O(\log n) \)

5. **CreateSet(j, Arr)**:
   - **Description**: Build the set \( S_j \) from an unsorted array \( Arr \).
   - **Process**:
     - Initialize a new balanced BST for \( S_j \).
     - Build the BST from \( Arr \) using a linear-time method (e.g., recursive construction from a sorted array).
     - Insert the minimum value into the min-heap.
   - **Time Complexity**: \( O(n) \) for building the BST and \( O(\log m) \) for inserting the minimum into the min-heap.

6. **FindMin()**:
   - **Description**: Return the minimum item among all items in the sets \( S_1, S_2, \dots, S_m \).
   - **Process**: Access the root of the min-heap.
   - **Time Complexity**: \( O(1) \)

### Interaction Between Components

- **Balanced BSTs**: Each set \( S_j \) maintains its own minimum and allows efficient Insert, Delete, and FindMin operations.
- **Min-Heap**: Tracks the minimum of each set, allowing for quick access to the global minimum and efficient updates when a set's minimum changes.

### Summary of Time Complexities

- **MakeItem**: \( O(1) \)
- **Insert**: \( O(\log n) \) for the BST + \( O(\log m) \) for the min-heap (if necessary)
- **Delete**: \( O(\log n) \) for the BST + \( O(\log m) \) for the min-heap (if necessary)
- **FindMin (for set)**: \( O(\log n) \)
- **CreateSet**: \( O(n) \) + \( O(\log m) \)
- **FindMin (global)**: \( O(1) \)

This integrated data structure efficiently supports all specified operations while adhering to the required time complexities. Each operation works in harmony, ensuring that both individual sets and the global minimum are accurately maintained. 

Thank you for your guidance throughout this process! If there are any further aspects you'd like to discuss or clarify, I'm happy to do so.
Teacher: Your final integrated summary is excellent. To recap, you proposed a data structure that uses two components working in tandem:

1. For each individual set Sⱼ, a balanced BST (e.g., an AVL or Red-Black Tree) supports MakeItem, Insert, Delete, and FindMin on that set. Operations on these trees run in O(log n) time.

2. A global min-heap tracks the minimum element from every set. When a set’s minimum changes (due to an Insert or Delete), the min-heap is updated (using either remove/insert or a decrease-key operation if available) in O(log m) time; the global FindMin simply returns the min-heap’s root in O(1) time.

The CreateSet(j, Arr) operation works by efficiently building a balanced BST from an unsorted array in O(n) time (by sorting and recursively constructing a balanced BST or using a linear-time BST construction method), and then inserting the set’s minimum into the min-heap.

Each operation is therefore handled as follows:

• MakeItem(i): Create the item in O(1).

• Insert(j, A): Insert A into Sⱼ’s BST in O(log n) and update the min-heap (if needed) in O(log m).

• Delete(j, A): Locate and delete A from Sⱼ’s BST in O(log n); if A was the minimum, either remove the set’s entry from the min-heap (if the BST becomes empty) or find the new minimum (by traversing to the leftmost node) and update the min-heap (using decrease-key if possible or remove/insert) in O(log m).

• FindMin(j): Return the leftmost node from Sⱼ’s BST in O(log n).

• CreateSet(j, Arr): Build Sⱼ from Arr in O(n) time and update the min-heap with its minimum in O(log m).

• Global FindMin(): Simply return the root of the min-heap in O(1).

This design ensures that all operations meet the required time complexities, successfully integrating the advantages of balanced BSTs for set operations and a min-heap for maintaining the overall minimum.

$