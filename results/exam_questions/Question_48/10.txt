Question: \textbf{In the following section, the time and space complexity of initialization is \(O(1)\), and the space complexity at any given moment is \(O\) of the number of elements in the data structure. Describe how a matrix of size \(m \times m\) can be represented, supporting the operations of insertion at position \((i,j)\), reading from position \((i,j)\), and deletion from position \((i,j)\), in \(O(\log m)\) worst-case time for each operation.}
3o-mini: We can achieve the desired time bounds by representing the matrix as a sparse data structure using a balanced binary search tree (BST). In this representation, only cells that have been "inserted" (i.e. that hold a nondefault value) are stored. One common scheme is described below.

Step 1. Mapping Coordinates to a Total Order

The matrix is of size m×m, so there are m² potential positions, but we will only store the ones that have been inserted. We need to impose a total order on the pairs (i, j). A convenient way is to use a lexicographic (row‐major) order. For example, we define a function:

  key(i, j) = i * m + j

This maps each cell (i, j) to a unique integer between 0 and m² – 1. Notice that comparing two keys is an O(1) operation.

Step 2. Using a Balanced BST

Now, we store each inserted cell (i, j) along with its value in a balanced BST (for example, a Red-Black tree or an AVL tree). In our BST, each node stores the key obtained from the mapping above and the corresponding value. Note that:
 • Insertion of a node,
 • Reading (i.e. searching for a node), and
 • Deletion of a node
all take O(log n) time in the worst case, where n is the number of nodes currently in the tree.

Since n is at most m², these operations take O(log(m²)) = O(2 log m) = O(log m) worst-case time.

Step 3. Dealing with Initialization and Space

• Initialization: We can initialize the data structure simply by setting the tree to be empty, which takes O(1) time and space.

• Space Usage: At all times, the space used is O(the number of elements stored). This can be much less than m² if the matrix is “sparse.” The guarantee is that the space will be proportional to the number of inserted elements.

Step 4. Operation Details

• Insertion at (i, j): Compute key(i, j). If that key already exists in the BST, update the stored value; otherwise, insert a new node with this key. This takes O(log m) worst-case time.

• Reading from (i, j): Compute key(i, j) and search for it in the BST. If found return the stored value; if not, return a default value (for example, 0). This is O(log m) worst case.

• Deletion from (i, j): Compute key(i, j) and remove the corresponding node from the BST (if it exists). Again, this takes O(log m) worst-case time.

Conclusion

By representing an m×m matrix as a BST keyed on the integer mapping key(i, j)= i*m+j, we can perform insertion, reading, and deletion at any position in O(log m) worst-case time. Additionally, the data structure initializes in O(1) time, and it uses space proportional only to the number of elements stored.