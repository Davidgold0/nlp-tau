Question: We insert a set of elements \( X_1 \) of size \( n_1 \) into a hashing table of size \( m \) using the chaining method with the hashing function \( h \). All the linked lists formed in this table had a length of at most \( k_1 \). We then insert a second set of elements \( X_2 \) of size \( n_2 \) into another hashing table of size \( m \), also using the chaining method with the same hashing function \( h \). The linked lists formed in this table had a length of at most \( k_2 \). Finally, we insert all the elements of \( X_1 \) and \( X_2 \), in some order, into a third hashing table of size \( m \), again using the chaining method and the same hashing function \( h \). Provide a non-asymptotic bound, as tight as possible, on the number of keys that will be examined during a search operation (whether successful or unsuccessful) in the third hashing table.
3o-mini: We know the following facts:

1. When inserting X₁ (of size n₁) into a table of m slots using chaining and hash function h, every slot (or “bucket”) ends up with at most k₁ keys.
2. Similarly, when inserting X₂ (of size n₂) into another table of the same size (again with chaining and hash function h), every bucket ends up with at most k₂ keys.

Observe that the hash function h is the same in all cases. Thus, when keys from X₁ and X₂ are hashed by h, the following holds for every bucket i (1 ≤ i ≤ m):
  • The number of keys from X₁ in bucket i is at most k₁.
  • The number of keys from X₂ in bucket i is at most k₂.

Now, in the third hashing table we insert the union X₁ ∪ X₂ (in some order) using chaining with h. In any bucket i the keys from X₁ and X₂ will appear in some linked list, and the total number of keys in that bucket is at most
  k₁ + k₂.

When performing a search in a chaining hash table, whether the search is successful (finding a key) or unsuccessful (not in the table), we have to inspect all keys in the bucket (or at least until we find the key in the successful case). Therefore, in the worst-case scenario, the search will examine every key in the bucket. Since every bucket contains at most k₁ + k₂ keys, we have:

  Number of keys examined ≤ k₁ + k₂.

This bound is non-asymptotic—it holds exactly and does not involve any hidden constants or asymptotic notation.

Thus, the tight non-asymptotic bound on the number of keys examined during a search operation in the third table (whether the search is successful or not) is k₁ + k₂ keys.