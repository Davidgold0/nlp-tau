Question: A data structure is required that supports the following operations on elements containing two fields: \texttt{id} and \texttt{amount}. At any given time, the number of elements in the structure does not exceed $N$.

\begin{enumerate}
    \item \texttt{Add(i,x)}: Increases the value of the \texttt{amount} field of the element (the only one) with \texttt{id} = $i$, by $x$ if it exists. Otherwise, if no such element exists, it adds an element with \texttt{id} = $i$, \texttt{amount} = $x$ (no pointer is given to the element).
    \item \texttt{whoIsMax()}: Returns the \texttt{id} for which the \texttt{amount} field is maximal (if more than one exists, returns one of them).
    \item \texttt{Reduce(i,y)}: Decreases the \texttt{amount} of the element with \texttt{id} = $i$ by $y$ (no pointer is given to the element).
\end{enumerate}

Assume that all \texttt{id}s are in the range $[1, 3n]$.

Describe a deterministic data structure that supports operations 1 and 2 in $O(1)$ time in the worst case (there is no need to implement operation 3).
3o-mini: We can solve the problem by using two key ideas:

1. Use a direct‐access table (an array) to locate an element by its id in O(1) time.
2. Keep a pointer (or a variable) that always holds the element with the maximum “amount” (or its id).

Assume that the maximum number of elements present at any time is N and that all ids lie in the range 1 to 3N. Then we can allocate an array (say, A) of size 3N+1 (to allow for direct indexing by id). Here’s the idea:

• A[i] points to an element having id = i if it exists in the structure, and is null otherwise.

We also maintain a global pointer called maxPtr that always points to the element having the maximal “amount” so far (if there is a tie one can simply choose one of them).

Now, let’s see how the two operations (ignoring Reduce, as requested) are implemented:

------------------------------------------------
Operation: Add(i, x)

1. Check if A[i] is not null.
  a. If A[i] exists then increase its “amount” field by x.
  b. Otherwise, create a new element with id = i and amount = x and store its pointer in A[i].

2. Compare the new value of A[i].amount with maxPtr.amount.
  a. If maxPtr is null (i.e. the structure was empty) or if (A[i].amount) > (maxPtr.amount), set maxPtr to A[i].

Since the indexing into A is O(1) and the comparison/updating of maxPtr is also O(1), overall this operation works in O(1) worst-case time.
------------------------------------------------
Operation: whoIsMax()

Simply return maxPtr.id.

This operation takes O(1) time since it only requires a pointer lookup.

------------------------------------------------
Summary

Using this design, we have:
 • Direct access to each element (via array A[1..3N]) in O(1) time.
 • A readily available max pointer (maxPtr) that is updated in constant time whenever an element is added or increased.

Thus, both Add(i, x) and whoIsMax() run in O(1) worst-case time.

This deterministic data structure meets the requirements of the problem.