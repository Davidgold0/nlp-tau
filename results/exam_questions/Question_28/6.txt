Question: A data structure is required that supports the following operations on elements containing two fields: \texttt{id} and \texttt{amount}. At any given time, the number of elements in the structure does not exceed $N$.

\begin{enumerate}
    \item \texttt{Add(i,x)}: Increases the value of the \texttt{amount} field of the element (the only one) with \texttt{id} = $i$, by $x$ if it exists. Otherwise, if no such element exists, it adds an element with \texttt{id} = $i$, \texttt{amount} = $x$ (no pointer is given to the element).
    \item \texttt{whoIsMax()}: Returns the \texttt{id} for which the \texttt{amount} field is maximal (if more than one exists, returns one of them).
    \item \texttt{Reduce(i,y)}: Decreases the \texttt{amount} of the element with \texttt{id} = $i$ by $y$ (no pointer is given to the element).
\end{enumerate}

Assume that all \texttt{id}s are in the range $[1, 3n]$.

Describe a deterministic data structure that supports operations 1 and 2 in $O(1)$ time in the worst case (there is no need to implement operation 3).
3o-mini: We can solve the problem by “hard‐coding” the keys. In other words, because every id is in the range [1, 3n] and there are at most N ≤ n elements in the structure at any time, we can use an array (or direct‐access table) of size 3n to store the current amount for each id. In addition, we maintain a single variable that always points to (or holds) the id of the element with the maximal amount so far. Then all operations – if designed properly – run in O(1) worst‐case time.

Here’s one way to do it:

1. Define an array A[1…3n] (or a table) where A[i] holds the current “amount” for the element with id = i. (If an element isn’t present, you can have a flag or simply store 0 in it. You might need an extra boolean array if 0 is a valid value.)
2. Maintain a global variable, call it maxID, together with maxAmount, which always hold the id and amount of the maximum element currently stored.

Now let’s describe the two operations:

Operation 1: Add(i, x)
• If the element with id = i already exists (or you can simply check that A[i] is “active”), you do:
  A[i] ← A[i] + x.
• If it does not exist, “add” it by setting A[i] ← x.
• Then, compare A[i] with maxAmount. If A[i] > maxAmount (or if this is the first element inserted into an empty structure), update maxID ← i and maxAmount ← A[i]. Otherwise, do nothing.
Since the array access, addition, and one comparison take constant time, Add runs in O(1).

Operation 2: whoIsMax()
• Simply return maxID.
This is clearly an O(1) operation.

A few remarks:
• Because all ids are in the range [1, 3n] we can afford to allocate an array of that size.
• When using an array in this fashion, you have “direct access” to any element in constant time.
• We do not need a pointer to the element when performing Add (or Reduce, though the latter is not required here). The array index is the id.
• Note that we do not need to implement Reduce for this question. (In a more general setting, if Reduce were allowed to change the element that holds the maximum, we’d have to use a data structure like a heap or a doubly linked list keyed by amount – and then the worst-case O(1) guarantee for whoIsMax might be hard to maintain.)

Pseudocode Example:

 // Global arrays/variables
 initialize A[1…3n] to some “null” value or zero (and mark each slot as inactive if needed)
 maxID ← (undefined)
 maxAmount ← -∞   (or appropriate initial value)

 function Add(i, x):
  if element i exists in A then
   A[i] ← A[i] + x
  else
   A[i] ← x   // mark element i as existing
  if (maxID is undefined) or (A[i] > maxAmount) then
   maxID ← i
   maxAmount ← A[i]

 function whoIsMax():
  return maxID

Because each of these operations does only a few constant-time steps, this data structure meets the requirements.

Thus, by using a direct-access array keyed on id and a global variable to remember the current maximum, we achieve Add and whoIsMax in O(1) worst-case time.