Question: Given \( n \) segments on a line (each segment is defined by its start and end points). For simplicity, assume that all \( 2n \) points are distinct. A segment is called "central" if there are at least \( n/4 \) segments that start before it (i.e., their starting point is to the left of its starting point) and there are at least \( n/4 \) segments that end after it (i.e., their ending point is to the right of its ending point). Propose a dynamic data structure that supports the operations Insert and Delete of segments on the line in \( O(\log n) \) worst-case time, and also supports the operation IsCentric(p), which takes a pointer to a segment in the structure and answers whether the segment is central, in \( O(1) \) worst-case time.
3o-mini: We will describe one acceptable answer. The idea is to maintain all the segments in two balanced search trees (one ordered by start‐points and one ordered by end‐points) augmented with “order‐statistic” information (i.e. subtree sizes) so that we can quickly (in O(log n) worst‑case time) locate the n/4–th quantiles. Then, with a careful choice of global pointers to these quantiles, one may check “centrality” in O(1) worst‑case time.

Below is one way to design the data structure.

──────────────────────────────
The Data Structures

1. Two Order‐Statistic Trees:
 (a) T_start: a balanced BST (e.g. red–black tree or AVL tree) keyed by the segment’s start coordinate.
 (b) T_end: a balanced BST keyed by the segment’s end coordinate.
 Each node stores, besides its key and usual BST fields, the size of its subtree. (This is standard.)
 When a segment is inserted into the structure, we create a record that contains its start and end values and pointers to the corresponding nodes in T_start and in T_end. (Thus the caller’s pointer to a segment can be augmented with pointers to its helper nodes.)

2. Global Pointers to the “Quantile” Segments:
 – Let k = ⌊n/4⌋ + 1, where n is the current number of segments.
 – In T_start, let S_threshold be the segment of rank k (i.e. the segment with the k–th smallest start value). The condition “at least n/4 segments start before p” is equivalent to p having rank at least k in T_start, or p.start ≥ S_threshold.start.
 – In T_end, let E_threshold be the segment of rank (n – ⌊n/4⌋) (i.e. the segment with the (n – ⌊n/4⌋)–th smallest end value). Note that “at least n/4 segments end after p” is equivalent to p having rank at most (n – ⌊n/4⌋) in T_end, i.e. p.end ≤ E_threshold.end.

(One can think of these thresholds as “cut‐off” points. A given segment p is central if and only if 
  p.start ≥ S_threshold.start and p.end ≤ E_threshold.end.)

──────────────────────────────
The Operations

1. Insert(segment):
 • Insert the segment in T_start (using its start value) and in T_end (using its end value). Each insertion takes O(log n) worst–case.
 • Increase the overall count n.
 • Update the global pointers S_threshold and E_threshold. Since the trees are augmented with subtree sizes, one may “select” the kth (or n – ⌊n/4⌋–th) element in O(log n) time (see “order–statistic tree select”).
 Thus overall Insert takes O(log n) worst-case time.

2. Delete(segment):
 • Using the segment’s stored pointers to its nodes in T_start and T_end, delete it from both trees. Again each deletion takes O(log n) worst-case.
 • Decrease n.
 • Update S_threshold and E_threshold by performing two order–statistic select operations (each O(log n)).
 Thus overall Delete takes O(log n) worst–case time.

3. IsCentric(p):
 • The query gets as input a pointer to a segment p.
 • Check whether p.start ≥ S_threshold.start and p.end ≤ E_threshold.end.
 • Because the global pointers provide the exact cutoff values and these comparisons take O(1) time, IsCentric runs in O(1) worst–case time.

──────────────────────────────
Why It Works

Recall the definition: a segment is “central” if at least n/4 segments have start–points to the left of its start (i.e. p is not among the first n/4 start–points), and at least n/4 segments have end–points to the right of its end (i.e. p is not among the last n/4 end–points).
By maintaining S_threshold as the (n/4 + 1)–st segment in order of start–points, any segment whose start coordinate is not less than S_threshold.start has at least n/4 smaller start–points.
Likewise, by maintaining E_threshold as the (n – ⌊n/4⌋)–th segment in order of end–points, any segment with p.end ≤ E_threshold.end has at least n/4 segments with larger end–points.

Thus, we can decide centrality by two simple comparisons.

──────────────────────────────
Summary

The proposed dynamic data structure consists of:
 • Two balanced BSTs (order–statistic trees) that allow insertion and deletion in O(log n) worst–case time.
 • Two global pointers (or cached values) to the n/4–quantiles necessary for the centrality test.
Since these quantile pointers are updated in O(log n) time when a segment is inserted or deleted, the overall complexity is as required.
The operation IsCentric is then just two comparisons (of p.start and p.end against the cached threshold values) yielding O(1) worst–case time.

Any answer that implements this idea is acceptable.