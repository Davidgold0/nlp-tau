Question: Describe a data structure whose elements are pairs of keys \( (a, b) \) that supports the following operations:

\begin{itemize}
    \item \texttt{insert(a, b)} – Adds the key pair \( (a, b) \) to the data structure. It is assumed that the pair does not already exist in the structure. This operation should be performed in expected time \( O(1) \).
    \item \texttt{SearchAll(a)} – Returns a list of all key pairs where \( a \) is the left key. This operation should be performed in expected time \( O(1) \).
\end{itemize}
3o-mini: One simple solution is to use a hash table (or dictionary) keyed by the "a" component of each pair. In this scheme, each key a maps to a list (or another container such as a linked list or dynamic array) of all pairs (a, b) that have that same left key.

Here’s how the operations work with this design:

1. insert(a, b):
   • Use the hash table to quickly check (in expected O(1) time) if the key a is already present.
   • If not, create a new list for that key.
   • Append the pair (a, b) (or just b if a is already stored; you already know the key a) to the list associated with a.
   • The hash table insertion (or lookup) runs in expected O(1) time, and appending to the list is O(1), so the entire operation is expected O(1).

2. SearchAll(a):
   • Simply use the hash table to look up the key a. This lookup is done in expected O(1) time.
   • Return the list associated with the key a (which contains all pairs or just the second components b corresponding to a).
   • (Note: If you want to “return a list” you are really just returning a pointer or reference to the underlying list, which is done in constant time.)

Thus, by using a hash table that maps an "a" value to a list of (a, b) pairs, both operations satisfy the requirements of expected O(1) time.