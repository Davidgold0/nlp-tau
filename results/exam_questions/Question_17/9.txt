Question: Describe a data structure whose elements are pairs of keys \( (a, b) \) that supports the following operations:

\begin{itemize}
    \item \texttt{insert(a, b)} – Adds the key pair \( (a, b) \) to the data structure. It is assumed that the pair does not already exist in the structure. This operation should be performed in expected time \( O(1) \).
    \item \texttt{SearchAll(a)} – Returns a list of all key pairs where \( a \) is the left key. This operation should be performed in expected time \( O(1) \).
\end{itemize}
3o-mini: We can achieve both operations in expected constant time by using a hash table that maps each left key a to a list (or dynamic array) of key pairs that share that left key.

Here’s how it works:

1. Create a hash table where each key is a value of a (the left key). Each hash table entry contains a pointer to a list (or array) of pairs (a, b).

2. To perform insert(a, b):
   • Use the hash function to compute the hash value for a.
   • In the corresponding hash table bucket, check if there is already a list for a.
   • If not, initialize a new list.
   • Append (a, b) to that list.
   Because hash table insertions and pointer manipulations are expected O(1) (assuming a good hash function and that the pair (a, b) does not already exist), this step takes expected O(1) time.

3. To perform SearchAll(a):
   • Use the hash function to quickly access the bucket for a.
   • Return the list stored there, which is exactly the list of key pairs with left key a.
   Since the hash table lookup is expected O(1), SearchAll(a) also runs in expected O(1) time.

This data structure meets the requirements because it organizes the key pairs by their left key using a hash table, and both insertion and search are based on operations (hashing and list manipulation) that average constant time.