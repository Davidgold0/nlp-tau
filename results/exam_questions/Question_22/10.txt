Question: Given an ordered set \( S \), we define the degree of an element in the set as its position in a sorted array of the elements (all elements have different values). Throughout the question, \( h \) represents the number of elements currently in the requested data structure.

\textbf{(A)} Describe a data structure that supports the following operations:
\begin{itemize}
  \item \texttt{Init()} – initialize the structure in \( O(1) \) time.
  \item \texttt{Insert(x)} – insert the element \( x \) into \( S \) in \( O(\log n) \) time.
  \item \texttt{Delete(x)} – delete the element \( x \) from \( S \) in \( O(\log n) \) time.
  \item \texttt{Min()} – return the element with the minimum degree (smallest value) in \( O(1) \) time.
  \item \texttt{Max()} – return the element with the maximum degree (largest value) in \( O(1) \) time.
  \item \texttt{AVG()} – return the element with the minimum degree whose value is greater than or equal to the average of the elements in the structure in \( O(1) \) time.
\end{itemize}
3o-mini: We will show that one acceptable solution is to “augment” a balanced‐search tree so that most work is done during updates (which are allowed O(log n) time) and so that the three query operations Min(), Max(), and AVG() run in O(1) time. One such design is as follows.

Overview:
• We maintain a balanced binary search tree (for example, a red–black tree or AVL tree) that stores all the elements in sorted order.
• In addition to the usual BST fields (key, left/right children, parent), each node stores pointers linking it with its in–order predecessor and successor (this is easily maintained with a “threaded” BST or with an extra doubly–linked list of the nodes in sorted order).
• We maintain two global variables:
  – h: the number of elements in the structure.
  – sum: the sum of all of the elements’ values.
• We also store three “global” pointers (or references):
  – minPtr: a pointer to the minimum element (i.e. the leftmost node).
  – maxPtr: a pointer to the maximum element (i.e. the rightmost node).
  – avgPtr: a pointer to the “average candidate,” defined as the node with the minimum degree (position in the sorted order) whose value is ≥ (sum/h). (That is, if avg = sum/h, then avgPtr points to the smallest element x with x ≥ avg.)
  
When the data structure is initialized using Init(), these globals are set appropriately (for an empty set, h = 0, sum = 0, and the pointers are null).

Operations in Detail:

1. Init() in O(1) time:
  – Create an empty balanced BST.
  – Set h = 0 and sum = 0.
  – Set minPtr, maxPtr, and avgPtr to null.

2. Insert(x) in O(log n) time:
  a. Insert the element x into the BST (using the standard balanced BST insertion algorithm) in O(log n) time.
  b. As you insert, update the predecessor/successor links (or update the “doubly–linked list” pointers).
  c. Increase h by 1, and update sum by adding x.
  d. If h = 1 (first element) set minPtr, maxPtr, and avgPtr to point to x.
  e. Otherwise, update:
   – If x is less than the current min, update minPtr.
   – If x is more than the current max, update maxPtr.
  f. Finally, since sum and h have changed, the average value avg = sum/h may have shifted. To make AVG() O(1), we “pre–compute” the node that is the answer. Do an (augmented) search in the BST to find the smallest element with value ≥ avg. (Since the BST is balanced, this search takes O(log n) time.) Update avgPtr with this node.
   (Note: You may carry out this search by traversing the BST according to the following idea: Starting at the root, if the current node’s value is ≥ avg, record it as a candidate and go left; otherwise, go right. When finished, the candidate is the answer.)

3. Delete(x) in O(log n) time:
  a. Delete the element x from the BST in the customary way (balancing as needed), taking O(log n) time.
  b. Update the predecessor/successor pointers (or the linked list).
  c. Decrease h by 1 and update sum by subtracting x.
  d. If x was minPtr or maxPtr, update these global pointers to the new leftmost or rightmost nodes.
  e. Recalculate the average value avg = sum/h.
  f. Find the smallest element in the BST with value ≥ avg (again by a BST search as described above). Update avgPtr accordingly. (This search takes O(log n) time.)

4. Min() in O(1) time:
  – Simply return minPtr (which always points to the smallest element).

5. Max() in O(1) time:
  – Simply return maxPtr (which always points to the largest element).

6. AVG() in O(1) time:
  – Since we have maintained avgPtr (updated during each Insert/Delete), return the value pointed to by avgPtr.

Correctness and Running Times:
• The BST supports Insert and Delete in O(log n) time.
• The global variables h and sum allow us to calculate the average in O(1) time.
• The BST search to update avgPtr in Insert() and Delete() is O(log n) – which is acceptable.
• The pointers minPtr, maxPtr, and avgPtr then allow Min(), Max(), and AVG() to be answered in O(1) time.

Thus, with this data structure you have:
  Init: O(1)
  Insert: O(log n)
  Delete: O(log n)
  Min, Max, and AVG: O(1) each.

This is one acceptable solution to the problem.