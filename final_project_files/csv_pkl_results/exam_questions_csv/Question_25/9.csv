Question: Given an array with $n$ numbers.
\textbf{B.} Describe a deterministic algorithm with time complexity $O(n \log n)$ that returns the number of distinct elements in the array. Prove your answer.
3o-mini: We can solve the problem by first sorting the array and then scanning through it to count distinct values. Here’s the detailed algorithm and its proof of correctness and time complexity.
Algorithm:
1. Sort the array of n numbers using any efficient comparison-based sorting algorithm (such as mergesort or heapsort) which takes O(n log n) time.
"2. Initialize a counter ""uniqueCount"" to 0."
3. Iterate through the sorted array:
"   a. For the first element (at index 0), increment uniqueCount (since it is the first distinct element)."
"   b. For each subsequent element at index i (from 1 to n – 1), compare it with the previous element:"
"      - If it is different from the element at i – 1, then increment uniqueCount."
4. Return uniqueCount.
Proof of Correctness:
"• Since sorting arranges the numbers in ascending (or descending) order, all duplicates will be adjacent to one another."
"• By comparing each element with its immediate predecessor, we correctly identify a new distinct element only when the element differs from the previous one."
"• Thus, every distinct element is counted exactly once."
Time Complexity Analysis:
• Sorting the array takes O(n log n) time.
• Scanning the sorted array to count distinct values takes O(n) time.
"• Therefore, the total running time is O(n log n) + O(n), which simplifies to O(n log n)."
This deterministic algorithm meets the problem requirement and has been proven both correct and efficient.
