"Question: A data structure is required that supports the following operations on elements containing two fields: \texttt{id} and \texttt{amount}. At any given time, the number of elements in the structure does not exceed $N$."
\begin{enumerate}
"    \item \texttt{Add(i,x)}: Increases the value of the \texttt{amount} field of the element (the only one) with \texttt{id} = $i$, by $x$ if it exists. Otherwise, if no such element exists, it adds an element with \texttt{id} = $i$, \texttt{amount} = $x$ (no pointer is given to the element)."
"    \item \texttt{whoIsMax()}: Returns the \texttt{id} for which the \texttt{amount} field is maximal (if more than one exists, returns one of them)."
"    \item \texttt{Reduce(i,y)}: Decreases the \texttt{amount} of the element with \texttt{id} = $i$ by $y$ (no pointer is given to the element)."
\end{enumerate}
"Assume that all \texttt{id}s are in the range $[1, 3n]$."
Describe a deterministic data structure that supports operations 1 and 2 in $O(1)$ time in the worst case (there is no need to implement operation 3).
"3o-mini: We can use a very simple solution that takes advantage of the fact that ids come from a fixed range ([1, 3n]) and that at most N elements are ever “active” in the data structure."
The idea is to use an array (or table) of size 3n such that each entry A[i] corresponds to the element with id i. Each entry holds two pieces of information:
  • The current value in its amount field.
  • A flag indicating whether an element with that id is actually in the structure.
"In addition, we maintain a global variable (say maxID) that always stores the id of the element having the maximal (current) amount. (Since if there is a tie we can choose arbitrarily, we only update maxID when we see a strictly larger amount.)"
Here is a high‐level description of the operations.
Initialization:
  – Create an array A[1 … 3n] where each entry is a record with two fields: amount and inStructure (a Boolean).
"  – Initialize each A[i].inStructure to false (and amount can be initialized to 0), and initialize maxID to “undefined” (or a special value indicating no element exists)."
"Operation 1: Add(i, x)"
"  1. Look at A[i]. If A[i].inStructure is false, then this id is not in the structure."
    • Set A[i].amount to x.
    • Set A[i].inStructure to true.
"  2. Otherwise, if A[i].inStructure is true, add x to A[i].amount."
"  3. Now compare A[i].amount with the amount at maxID. (If no element exists yet, simply set maxID = i.)"
    • If maxID is undefined or A[i].amount > A[maxID].amount then set maxID to i.
"  Because the array lookup and the update of maxID are all constant‐time operations, the total time is O(1) worst case."
Operation 2: whoIsMax()
  Simply return maxID.
  This is clearly O(1).
"Note that operation 3, Reduce(i, y), is not needed to be implemented for this problem (although one may worry that reducing the amount for the element with id maxID might render the maxID pointer incorrect—in our case, we are only asked to support Add and whoIsMax in O(1) worst case, so we do not need to update the max pointer on reduction)."
Summary:
  By directly indexing an array (of size O(n)) by id and keeping an extra variable called maxID we can support Add and whoIsMax in worst-case O(1) time each.
This is one deterministic data structure that meets the requirements.
