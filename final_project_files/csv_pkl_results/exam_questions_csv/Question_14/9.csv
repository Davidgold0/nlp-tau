"Question: In B-trees with a minimum degree \( d \) (where each internal node has between \( d \) and \( 2d \) children), the amount of information stored in the leaves is smaller because there is no need to store child pointers. Assume that a disk block is large enough to hold a node at its maximum size and that each node is stored in a separate disk block."
"To take advantage of the free space in the disk block containing a leaf, we modify the definition of the tree and set that each leaf will contain between \( 2d-1 \) and \( 4d-1 \) elements, instead of between \( d-1 \) and \( 2d-1 \). It is given that the size of an element is equivalent to the size of a pointer, so such an enlarged leaf still fits in a block. As long as the tree has no more than \( 4d \) elements, the tree consists of a single enlarged leaf."
"This is called a B-tree with enlarged leaves. Briefly describe a top-down insertion algorithm (the algorithm does not modify the tree after the element is inserted into the appropriate leaf, only during the search) for a B-tree with enlarged leaves as described above."
"3o-mini: We can solve the problem by “pre‐splitting” nodes—both internal nodes and leaves—as we descend the tree. That means that instead of inserting an element into a leaf and then “walking back up” to rebalance the tree if the node is overfull, we modify the search path (during top‐down traversal) so that we never descend into a full node. Then the insertion itself is trivial."
Here is one acceptable description of the algorithm:
"1. Check the root. If it is full (that is, if it is an internal node with 2d children or, if it is a leaf, it has 4d–1 keys), then allocate a new node which becomes the new root and split the old root as one would normally do in a B–tree. (In the case of a root that is an “enlarged leaf”, splitting creates two leaves that each have roughly half of the keys; note that they will then obey the rule that a leaf contains between 2d–1 and 4d–1 keys.) "
"2. Now start at the root and search for the correct leaf where the new element should be inserted. At each internal node, before following a pointer to a child, check if that child is “full” (i.e. if it is an internal node that already has 2d children or if it is a leaf that already has 4d–1 keys)."
"3. If you find that a child is full you split it immediately. (Splitting is done as usual: you take the median element, move it up into the parent, and partition the node into two nodes. For an “enlarged leaf” the split should produce two leaves that each have at least 2d–1 elements, preserving the invariant.) This ensures that when you eventually reach the leaf where you need to insert the element, it is not full."
4. Continue this process until you reach the appropriate leaf node.
"5. Insert your new element into this leaf (which now has room because we pre‐split any full nodes on the way down). Since the insertion is done into a node that is known to have room, no further rebalancing is necessary."
"The key idea is that by “top‐down” splitting – that is, splitting nodes (and enlarged leaves) before recursing into them – we guarantee that the place of insertion is never full. This avoids having to propagate changes upward after the actual insertion and simplifies the algorithm considerably."
"This algorithm is essentially the same as the standard top–down B–tree insertion, with the only twist being that our leaves now have a larger capacity (up to 4d–1 keys) and must be split accordingly when they are “full.”"
