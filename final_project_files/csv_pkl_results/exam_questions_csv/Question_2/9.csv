Question: Given an array \( A \) containing \( n \) integers.  
"Given a number \( x \) that appears in \( A \), we define the multiplicity of \( x \) in array \( A \) as the number of times \( x \) appears in \( A \).  "
"We want to create a sorted array \( B \) of size \( n \), which will contain the multiplicity of each number appearing in \( A \).  "
Propose an algorithm that solves the problem with the best expected time complexity.  
3o-mini: We can solve this problem in expected O(n) time by first computing the multiplicity (frequency) of each integer in A using a hash table and then constructing the sorted array B using a counting sort–like step. Here’s how to do it step by step.
Step 1. Count the frequencies.
 • Create a hash table H (or dictionary) that maps each integer in A to its frequency.
" • Scan through the array A once. For each element a in A, update H[a] = H[a] + 1 (or set H[a] = 1 if it’s not already in the table)."
  – This takes O(n) expected time.
Step 2. Build the unsorted frequency array.
 • Create an array B of size n.
" • For each element a in A (again scanning through A), look up its frequency in H (i.e. H[a]) and set B[i] = H[a]."
"  – Since the hash table lookup is O(1) expected time for each element, this step also takes O(n) expected time."
"Now B contains, for each entry in A, the number of times that particular integer appears. Note that if a number x appears f times in A then the number f will occur f times in B."
Step 3. Sort the frequency array B.
 • Here the elements of B are integers in the range 1 to n (because no number can appear more than n times). This makes counting sort a very efficient option.
 • Create an auxiliary array Count of size n+1 (to account for frequency values 1 through n).
" • For each frequency f in B, increment Count[f]."
" • Next, build the sorted version of B by traversing the Count array from 1 to n. For each frequency f, append Count[f] copies of f into the sorted output array."
  – This step runs in O(n) time.
The overall time complexity is O(n) expected time because:
 – Building H is O(n) expected time.
 – Creating the array B via lookups is O(n) expected time.
 – Sorting B using counting sort is O(n) time.
"Thus, the algorithm meets the best expected time complexity."
Pseudocode:
 function createSortedFrequencies(A):
  n = length(A)
  initialize empty hash table H
  for i from 0 to n – 1:
   if A[i] is in H:
    H[A[i]] = H[A[i]] + 1
   else:
    H[A[i]] = 1
  initialize array B of size n
  for i from 0 to n – 1:
   B[i] = H[A[i]]
"  // Use counting sort because the frequencies are in [1,n]"
  initialize array Count of size n+1 with all zeros
  for i from 0 to n – 1:
   Count[B[i]] = Count[B[i]] + 1
  initialize array SortedB of size n
  index = 0
  for f from 1 to n:
   for j from 1 to Count[f]:
    SortedB[index] = f
    index = index + 1
  return SortedB
This algorithm produces the sorted array of multiplicities in B in O(n) expected time.
