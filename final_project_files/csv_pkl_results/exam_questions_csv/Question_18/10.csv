"Question: Given \( n \) pairs of keys \( (a_1, b_1), (a_2, b_2), \dots, (a_n, b_n) \), where each key \( a_i \) and each key \( b_j \) (for \( 1 \leq i,j \leq n \)) are integers in the range \([1, 10n]\), describe a data structure that can be built in Worst-case time \( O(n) \) (given \( n \) key pairs) and supports the following operation in Worst-case time \( O(1) \):"
\texttt{SearchAll(a)} – returns a list of all key pairs for which \( a \) is the left key.
"3o-mini: We can solve this problem by taking advantage of the fact that the left keys come from a small, fixed range, namely [1, 10n]. This allows us to use a direct‐address table (i.e. an array) indexed by the left key value. The idea is to precompute, in O(n) worst-case time, an array of “buckets” where each bucket holds the list of all key-pairs that have that left key."
Below is a more detailed explanation:
"1. Create an array T of size 10n + 1 (if we number the indices from 1 to 10n). Each entry T[i] will point to a list (or chain) of all key pairs (a, b) for which the left key equals i. Since the universe size (10n) is O(n) we have only O(n) extra space."
"2. To build the data structure, iterate once over the n given pairs. For each pair (a, b), do the following in worst-case O(1) per pair:"
"   • Append (a, b) to the list stored at T[a]."
"   Since we process n pairs and each insertion is O(1), the total build time is O(n) worst-case."
3. To support the operation SearchAll(a):
"   • Simply use a as an index into T. That is, return the list T[a]. Because direct array indexing is O(1) in the worst-case, the search operation takes constant time."
Here’s a rough pseudocode that summarizes the idea:
-------------------------------------------------
Initialize T[1..10n] as an array of empty lists
"for each pair (a, b) in the input do"
"    T[a].append((a, b))"
end for
Function SearchAll(a):
    return T[a]
-------------------------------------------------
This design meets both requirements:
• The build time is O(n) worst-case.
"• The search operation SearchAll(a) takes O(1) worst-case time (apart from the time to traverse or process the returned list, which is output-dependent)."
"Thus, using a direct-address table (or bucket array) yields the desired data structure."
