"Question: Describe a data structure whose elements are pairs of keys \( (a, b) \) that supports the following operations:"
\begin{itemize}
"    \item \texttt{insert(a, b)} – Adds the key pair \( (a, b) \) to the data structure. It is assumed that the pair does not already exist in the structure. This operation should be performed in expected time \( O(1) \)."
    \item \texttt{SearchAll(a)} – Returns a list of all key pairs where \( a \) is the left key. This operation should be performed in expected time \( O(1) \).
\end{itemize}
"3o-mini: One elegant solution is to use a hash table (or dictionary) where each key in the table is the left component (a) of the pair, and the corresponding value is a list (or dynamic array) of pairs (a, b) that share that left key."
Here’s how the data structure works:
"1. The hash table maps from an element a to a list of pairs. For example, table[a] could contain [(a, b1), (a, b2), …]."
"2. For the operation insert(a, b):"
   - Check if a is already present as a key in the hash table.
"   - If not, create a new empty list for that key."
"   - Append the pair (a, b) to the list associated with a."
"   - Since hash table look-up and list appending both run in expected O(1) time, the entire operation is O(1) expected."
3. For the operation SearchAll(a):
   - Simply look up a in the hash table.
   - Return the list of pairs associated with a (or an empty list if a isn’t present).
   - This hash table lookup is also in expected O(1) time.
This data structure meets the requirements by ensuring that both insertion and searching for all pairs with a given left key run in expected constant time.
