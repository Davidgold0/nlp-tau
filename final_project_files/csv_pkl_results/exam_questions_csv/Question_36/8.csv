"Question: We define a zig-zag array, for which there exist some indices \( n \leq j \leq i \leq 1 \) such that all elements in the array between 1 and \( i \) are in increasing order, all elements between \( i \) and \( j \) are in decreasing order, and all elements between \( j \) and \( n \) are in increasing order. We call \( i \) the peak element and \( j \) the valley element. "
Provide upper and lower bounds for the problem: Input: Array. Output: Returns TRUE if the array is a zig-zag array.
"3o-mini: We can show that any algorithm that determines whether an array is a zig‐zag array must take on the order of n steps (where n is the number of elements in the array). In other words, the problem has a tight bound of Θ(n)."
To explain briefly:
• Upper Bound – O(n):  
"An algorithm can solve the problem in one linear scan. For example, you can proceed in three phases:"
 1. Traverse the array from the beginning to identify the longest initial increasing sequence.
" 2. From that point, check the next segment to see that it is strictly decreasing."
" 3. Finally, verify that the remaining sequence is strictly increasing again.  "
"Since each pass is linear in the size of the part of the array, the whole algorithm runs in O(n) time."
• Lower Bound – Ω(n):  
"In the worst case, every element must be inspected. There is no shortcut that avoids looking at every element (or at least almost every element) because the zig‐zag property might fail very late in the array. Thus any comparison based algorithm will be forced to make at least one inspection per element, which gives a lower bound of Ω(n)."
Combining these results shows that verifying whether an array is a zig‐zag array has asymptotic complexity Θ(n).
