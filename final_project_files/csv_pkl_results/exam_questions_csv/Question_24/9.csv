"Question: Given an array of $n$ numbers, describe an algorithm with a time complexity of $O(n)$ that checks whether there is an element that appears at least $n/8$ times in the array. Prove your answer."
3o-mini: We can solve the problem by using a generalization of the Boyer–Moore Majority Vote algorithm known as the Misra–Gries algorithm. The idea is to maintain at most 7 candidate elements (since n/8 implies that there can be at most 7 such “heavy hitter” candidates if they exist) and then verify if any of them appears at least n/8 times.
"Below is a step‐by‐step description of the algorithm, followed by a proof of its correctness and its O(n) time complexity."
────────────────
Algorithm Description:
"1. Initialize an empty set (or dictionary) candidates that will store at most 7 pairs (element, count)."
2. First Pass – Candidate Selection:
   For each element x in the array:
"   a. If x is already in candidates, increment its count."
"   b. Otherwise, if the number of candidates is less than 7, add x with count 1."
"   c. Otherwise (i.e. x is not in candidates and there are already 7 candidates), decrement the count of every candidate by 1. If any candidate’s count drops to 0, remove that candidate from the set."
3. Second Pass – Count Verification:
"   For each candidate in the set candidates, set its count to 0."
   For each element x in the array:
"     If x is one of the candidates, increment its count."
"4. Finally, for each candidate check if its count is at least n/8. If any candidate satisfies this, output that a heavy hitter exists (and you can even report the candidate). Otherwise, report that no element appears at least n/8 times."
────────────────
Proof of Correctness:
1. Candidate Survival:
"   - The algorithm guarantees that if an element appears more than n/8 times, it will not be completely eliminated during the first pass. This is because each decrement phase reduces the count of each candidate by 1 only when a “competing” element (not in the candidate set) is encountered. Since any element that appears more than n/8 times provides more “votes” than can be canceled out by the votes of at most 7 other elements, it must remain among the candidates by the end of the first pass."
2. Verification:
"   - In the second pass, we count the actual frequency of each candidate. This ensures that only those candidates that appear at least n/8 times are confirmed. This verification step is necessary because the first pass only guarantees that all potential candidates that exceed the threshold are in the set, not that every candidate in the set necessarily meets the criterion."
────────────────
Time Complexity Analysis:
"- In the first pass, we examine each of the n elements exactly once. Although in the worst-case scenario we may perform up to 7 decrements per element (when we have 7 candidates already), this is O(1) work for each element because 7 is a constant."
- The second pass is a straightforward O(n) operation to count occurrences of the candidates.
"Thus, the overall time complexity is O(n) + O(n) = O(n)."
────────────────
Conclusion:
"By using the Misra–Gries algorithm (a generalized form of Boyer–Moore), we can check in O(n) time whether there is an element in the array that appears at least n/8 times. The algorithm works in two passes: the first pass identifies a small set of potential candidates, and the second pass verifies the true occurrence counts of these candidates."
