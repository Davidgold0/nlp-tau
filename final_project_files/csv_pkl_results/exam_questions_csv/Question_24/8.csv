"Question: Given an array of $n$ numbers, describe an algorithm with a time complexity of $O(n)$ that checks whether there is an element that appears at least $n/8$ times in the array. Prove your answer."
"3o-mini: We can solve the problem using a variant of the Misra–Gries algorithm, which is designed to find all elements that occur more than n⁄k times in an array (in our case, k = 8). The idea is to first generate a list of at most k – 1 (here, 7) candidates that might appear at least n/8 times, and then verify these candidates with a final pass over the array."
Here’s the algorithm step by step:
Step 1. Candidate Selection (First Pass)
───────────────────────────────
• Initialize an empty set (or dictionary/map) called candidate_count to hold at most 7 candidate elements along with their counts.
• For each element x in the array:
"  – If x is already in candidate_count, increment its count."
"  – Otherwise, if candidate_count has fewer than 7 elements, add x with count 1."
"  – If candidate_count already contains 7 elements and x is not among them, decrement the count of every candidate by 1. Remove any candidate whose count drops to 0."
Step 2. Candidate Verification (Second Pass)
────────────────────────────────────────────────
"• For each candidate still in candidate_count, initialize its count to 0."
• Make another pass through the array and increment the count for an element if it matches one of the candidates.
"• Check if any candidate's count is at least n/8. If so, output that such an element exists (or return the element, if needed)."
"Time Complexity: Each pass goes through the array once, taking O(n) time, and each update on candidate_count is O(1) (since there are at most 7 candidates). Thus, the overall algorithm runs in O(n) time."
Proof of Correctness:
─────────────────────────
"1. If an element appears at least n/8 times, then even after the candidate elimination process (where each step decrements counts on all candidates) such an element cannot be completely eliminated. This is a well-known property of the Misra–Gries algorithm. Hence, any element meeting the frequency threshold will appear among the candidates at the end of the first pass."
2. The second pass ensures that we count the actual frequencies of the remaining candidates. This step is necessary because the counts maintained in the first pass are “relative” counts and not the actual frequency.
"3. Since we only check the at most 7 remaining candidates, the additional overhead is minimal and does not alter the O(n) time complexity."
"Thus, using the candidate elimination method and subsequent verification, we have an O(n) algorithm to determine whether there is an element appearing at least n/8 times in an array."
Pseudocode Example:
─────────────────────────────
function hasElementAppearingAtLeastNOver8(array A):
    candidate_count = {}  // an empty dictionary
    // First Pass: Candidate Selection
    for each x in A:
        if x in candidate_count:
            candidate_count[x] += 1
        else if size(candidate_count) < 7:
            candidate_count[x] = 1
        else:
            for each key in candidate_count:
                candidate_count[key] -= 1
                if candidate_count[key] == 0:
                    remove key from candidate_count
    // Second Pass: Verify the actual counts for the candidates
    // Initialize counts to 0 for each candidate
    for each key in candidate_count:
        candidate_count[key] = 0
    for each x in A:
        if x in candidate_count:
            candidate_count[x] += 1
    // Check if any candidate appears at least n/8 times
    for each key in candidate_count:
        if candidate_count[key] >= length(A) / 8:
            return True  // found an element meeting the criteria
    return False
This algorithm correctly and efficiently checks for the presence of an element that occurs at least n/8 times in O(n) time.
