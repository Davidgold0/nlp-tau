"Question: Given an array of $n$ numbers, describe an algorithm with a time complexity of $O(n)$ that checks whether there is an element that appears at least $n/8$ times in the array. Prove your answer."
"3o-mini: We can solve the problem in O(n) time by adapting the Misra–Gries (or “frequent elements”) algorithm. Since n/8 is our threshold, note that there can be at most 7 elements that appear more than n/8 times. (Otherwise, if there were 8 or more such elements, their total count would exceed n.) Hence, we can maintain at most 7 candidate elements while processing the array."
Below is a detailed description of the algorithm and its correctness proof.
──────────────────────────────
Algorithm:
"1. Initialize an empty candidate list (with up to 7 slots), each slot holding a candidate and its count."
2. For each number x in the array:
"   a. If x is already one of the candidates, increment its count."
"   b. Otherwise, if there is a free slot (i.e. fewer than 7 candidates are currently stored), add x with count 1."
"   c. Else (if x is not a candidate and no free slot is available), decrement the count of every candidate by 1. Remove any candidate whose count falls to 0."
"3. After this first pass, the candidate list contains at most 7 potential numbers that may have frequency at least n/8. (It is possible that none of them actually meets the threshold.)"
"4. To verify, initialize each candidate’s frequency counter to 0. Then, make a second pass over the array, and for each element, if it equals one of the candidates, increment that candidate’s frequency counter."
"5. Finally, check each candidate. If any candidate’s frequency is at least n/8, return “yes” (and optionally return the candidate); otherwise, return “no”."
──────────────────────────────
Proof of Correctness:
"1. (Candidate Survival) Suppose there is an element x that appears at least n/8 times in the array. When processing the array, during any step where we decrement all candidates (step 2.c), we are effectively “canceling out” one appearance of each candidate with one appearance of a different element. Since x appears so many times, it can’t be completely canceled out by at most 7 other candidates. More formally, if an element appears more than n/8 times, after the entire first pass of the algorithm, it must survive as one of the candidates. This is the standard guarantee of the Misra–Gries algorithm when maintaining k – 1 counters (here, k – 1 = 7 for k = 8)."
"2. (Counting Verification) The second pass over the array allows us to count the true frequency of each candidate. This is necessary because the first pass only guarantees that if an element appears at least n/8 times, it will be among the candidates. We must check whether any candidate truly meets the n/8 threshold."
──────────────────────────────
Time Complexity and Space Complexity:
• Time Complexity:
  - The candidate selection phase (first pass) processes each of the n elements once and performs O(1) work for each element (checking at most 7 candidates).
"  - The verification phase (second pass) also processes each element once and performs O(1) work per candidate (again, at most 7 comparisons)."
"  - Therefore, the overall time is O(n)."
• Space Complexity:
"  - We only store up to 7 candidates and their counts (plus a few auxiliary variables), so the space complexity is O(1)."
──────────────────────────────
Conclusion:
"Using the above algorithm, we can check in O(n) time whether there is an element that appears at least n/8 times in the array. The two-pass approach (first pass to select candidates and the second pass to verify their frequencies) guarantees both linear time complexity and correct detection of any element meeting the frequency threshold."
