"Question: \textbf{In the following section, the time and space complexity of initialization is \(O(1)\), and the space complexity at any given moment is \(O\) of the number of elements in the data structure. Describe how a matrix of size \(m \times m\) can be represented, supporting the operations of insertion at position \((i,j)\), reading from position \((i,j)\), and deletion from position \((i,j)\), in \(O(\log m)\) worst-case time for each operation.}"
"3o-mini: One elegant solution is to represent the matrix as a balanced binary search tree (such as a red–black tree, AVL tree, or any other self‐balancing BST) whose keys are the ordered pairs (i, j) (or, equivalently, a single number computed as i · m + j using a suitable bijection). Here’s how and why this works:"
1. Initialization (O(1) time and O(1) space):  
" • Rather than preallocating an m × m array, you start with an empty BST. This means that initially no memory is used for storing the actual entries (other than a constant amount for the data structure itself).  "
" • Thus, initialization can be done in O(1) time and the space used at any moment is proportional to the number of elements (cells) that have been inserted."
"2. Insertion at (i, j) (O(log m) worst-case time):  "
" • When you want to insert a value at position (i, j), you insert a node into the BST with key (i, j) (or with key i · m + j).  "
" • In a balanced BST with N nodes, the worst-case time for insertion is O(log N). In the worst-case scenario the matrix is completely full (N = m²), but notice that log(m²) = 2 log m, which is still O(log m)."
3. Reading (O(log m) worst-case time):  
" • To read the value at (i, j), you search the BST for the key (i, j).  "
" • Again, in the worst-case (with N = m² nodes) the search takes O(log (m²)) = O(log m)."
"4. Deletion at (i, j) (O(log m) worst-case time):  "
" • Similar to insertion and reading, deletion means you find the node corresponding to (i, j) in the BST and remove it.  "
 • This operation also takes O(log m) worst-case time for the same logarithmic reasons.
5. Space Complexity:  
" • Since you are only storing those entries that have been inserted (e.g., nonzero or active entries), the space used is O(k) where k is the number of elements in the data structure at any given time.  "
 • This is optimal when the matrix is sparse.
"In summary, by mapping the matrix positions (i, j) into keys in a balanced BST, we obtain a data structure that supports insertion, look-up, and deletion in O(log m) worst-case time (since O(log (m²)) = O(log m)) and uses space proportional to the number of inserted elements. This is exactly the desired result."
