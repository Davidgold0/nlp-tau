"Question: \textbf{In the following section, the time and space complexity of initialization is \(O(1)\), and the space complexity at any given moment is \(O\) of the number of elements in the data structure. Describe how a matrix of size \(m \times m\) can be represented, supporting the operations of insertion at position \((i,j)\), reading from position \((i,j)\), and deletion from position \((i,j)\), in \(O(\log m)\) worst-case time for each operation.}"
"3o-mini: One acceptable solution is to store only the entries that have been inserted (for example, the non‐zero entries) in a balanced binary search tree (BST). There are two common ways to do this:"
"1. • Create a single BST whose keys are the pairs (i, j) (with a lexicographic ordering, or by converting (i, j) into a single integer key, for instance using key = i · m + j). Since the total number of possible keys is m², the worst‐case search/insert/delete time in a BST is O(log(m²)) = O(2 log m) = O(log m)."
"2. • Alternatively, you can use an array with m entries (one for each row). Each entry in the array is a pointer to a balanced BST that stores the columns j for which there is a stored element in that row. Since each BST is over at most m elements, each operation on the BST takes O(log m) time."
In both cases:
"– Initialization is O(1) worst-case time. (You simply create an empty BST or an array of m null pointers, and you do not allocate space for the entire m × m matrix.)"
"– The space used at any moment is O(n), where n is the number of elements in the matrix (because you only store entries that have been explicitly inserted)."
"– The operations (reading, insertion, deletion) at a given position (i,j) are done by performing a BST lookup (or a lookup in the appropriate row’s BST) which takes O(log m) worst-case time."
"Thus, by using a balanced BST (either as a single structure keyed by a pair or as an array of m BSTs for each row), you represent the matrix in a sparse way and support operations at any position in O(log m) worst-case time."
