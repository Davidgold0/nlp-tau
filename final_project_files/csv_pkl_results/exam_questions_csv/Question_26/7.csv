"Question: Given a collection of sets $s_1, s_2, \dots, s_m$."
Describe a data structure that supports the following operations:
\begin{itemize}
    \item \texttt{MakeItem(i) $\gets$ A} – Create the item $A$ that holds the number $i$.
"    \item \texttt{Insert(j, A)} – Insert the item $A$ into set $S_j$ (it is assumed that the set $S_j$ exists)."
"    \item \texttt{Delete(j, A)} – Delete the item $A$ from set $S_j$ (it is assumed that the set $S_j$ exists)."
    \item \texttt{FindMin(j)} – Return the minimum item from set $S_j$ (it is assumed that the set $S_j$ exists).
"    \item \texttt{CreateSet(j, Arr)} – Build the set $j$ from an unsorted array of numbers."
"    \item \texttt{FindMin()} – Return the minimum item among all items in the sets $s_1, s_2, \dots, s_m$."
\end{itemize}
"All operations, except for \texttt{CreateSet}, should run in $O(\log n)$ time, where $n$ is the total number of items in sets $s_1, s_2, \dots, s_m$. The \texttt{CreateSet} operation should run in linear time relative to the size of the input array."
"3o-mini: We will show one solution that “layers” two kinds of data structures. Intuitively, you want to support two types of minimum queries:"
• A minimum in a given set Sj (i.e. FindMin(j))  
• The overall minimum among all sets (i.e. FindMin())
"So the idea is to “encapsulate” the operations on each set in a data structure that supports fast insertion, deletion, and minimum‐queries. (It is also required that when building a set from an array you do it in linear time.) Then, to support FindMin() quickly you maintain an “upper–level” data structure on the minimum elements of each Sj."
One acceptable solution is as follows.
────────────────────────
Step 1. Data structure for each set S₍ⱼ₎
"For each set Sj, we use a min–heap implemented as an array. (Any heap structure that supports the following will do.) That is, for each j we maintain a heap Hj with the following features:"
• It stores items (“nodes”) each having a number key (your item’s value).  
• FindMin(j) is just the item at the top of Hj (O(1) time).  
• Insertion and deletion (given a pointer to the item) take O(log |Sj|) time.  
"• Also, if you want to build a set from an unsorted array Arr, you can use the standard Build‐Heap algorithm in O(|Arr|) time."
"(In many languages or libraries, a binary heap can be “augmented” to store a handle into the heap so that deletions of arbitrary items run in O(log n).)"
So for the operations that work “within” a set Sj we do the following:
• MakeItem(i): simply create an item (a node) that holds the number i. (O(1))  
"• Insert(j, A): insert the item A into Hj in O(log |Sj|) time. After the insertion, check whether A is smaller than the current minimum of Hj. (If Hj was empty or if A’s key is smaller than the previous top, update it.)  "
"• Delete(j, A): delete the item A from Hj in O(log |Sj|) time. (If A was the current minimum, then the new minimum becomes the new root of Hj.)  "
• FindMin(j): simply return the item at the root of Hj. (O(1) time.)  
"• CreateSet(j, Arr): build Hj from the unsorted array Arr using the Build‐Heap algorithm, which takes O(|Arr|) time."
────────────────────────
Step 2. Supporting global minimum (FindMin())
"Now we want to quickly return the minimum item among all items in all sets S1, S2, …, Sm. Notice that if we know the minimum element in each set (which are exactly the items at the top of each min–heap Hj), then the overall minimum is the minimum among all these “set–minimum” items."
"Thus, we introduce a “global heap” G that stores one entry for each set Sj. Each entry in G is a pair (key, j) where key is the current minimum in Sj (i.e. the key of the root of the min–heap Hj) and j is the index of that set."
We maintain G as a min–heap with respect to key. Then the operations are:
"• Whenever an operation on S_j (insertion or deletion) changes its minimum (that is, when a new item is inserted that is smaller than the previous minimum, or the current minimum is deleted), we update the corresponding key for S_j in G. (This updating “change–key” operation takes O(log m) time, and note that m ≤ n so it is O(log n).)  "
"• FindMin() simply returns the minimum entry from G (namely, the set j for which the top of Hj is smallest). (O(1) time.)"
────────────────────────
Summary of Operations
Now let’s list the operations with their time bounds:
1. MakeItem(i)  
 – Create a new item (node) with key i. Time: O(1).
"2. Insert(j, A)  "
 – Insert A into the min–heap Hj for set S_j. (Time: O(log |Sj|)).  
" – If A becomes the new min for S_j, update the corresponding key in the global heap G. (Time: O(log m) ⊆ O(log n)).  "
 Overall: O(log n).
"3. Delete(j, A)  "
 – Delete A from Hj. (Time: O(log |S_j|)).  
" – If A was the minimum, then after deletion the new minimum is at the root of Hj. Update the corresponding entry in G (O(log m) ≤ O(log n)).  "
 Overall: O(log n).
4. FindMin(j)  
" – Return the root of Hj. O(1) work (or possibly O(log n) if you count any pointer chasing, but it is certainly within the bound)."
"5. CreateSet(j, Arr)  "
 – Build the min–heap Hj from the unsorted array Arr by the Build‐Heap algorithm: O(|Arr|) time.
6. FindMin()  
 – Return the root of G. (O(1) operation.)
────────────────────────
Discussion
"Any other “two–level” structure that accomplishes the same thing is acceptable. (For example, one might use balanced binary search trees (say, red–black trees) for each set and then store the current minimum for each set in a global balanced BST keyed by their minimums.) The solution above meets the requirement that every operation, except CreateSet, takes O(log n) worst–case time, and that CreateSet takes time linear in the size of its input array."
────────────────────────
Final Answer
"Maintain for each set S₍ⱼ₎ a min–heap that supports insertion, deletion (by using a pointer into the heap) and FindMin in O(1) locating the top, and use the standard Build‐Heap algorithm to create it in linear time for CreateSet. Also maintain a global min–heap G whose elements are the current minimums (one per set S₍ⱼ₎) so that overall FindMin() is simply “look at the top of G” and updating it on a change in any S₍ⱼ₎ takes O(log n). This data structure meets the stated requirements."
