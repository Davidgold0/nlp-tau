"Question: We insert a set of elements \( X_1 \) of size \( n_1 \) into a hashing table of size \( m \) using the chaining method with the hashing function \( h \). All the linked lists formed in this table had a length of at most \( k_1 \). We then insert a second set of elements \( X_2 \) of size \( n_2 \) into another hashing table of size \( m \), also using the chaining method with the same hashing function \( h \). The linked lists formed in this table had a length of at most \( k_2 \). Finally, we insert all the elements of \( X_1 \) and \( X_2 \), in some order, into a third hashing table of size \( m \), again using the chaining method and the same hashing function \( h \). Provide a non-asymptotic bound, as tight as possible, on the number of keys that will be examined during a search operation (whether successful or unsuccessful) in the third hashing table."
"3o-mini: We can show that in the third table every chain (at every slot) will contain at most k₁ + k₂ keys. Since a search operation (whether it finds the key or not) must scan all keys in the corresponding chain, this immediately gives a non‐asymptotic bound on the number of keys examined."
Here’s how to argue that the chain lengths are bounded by k₁ + k₂:
"1. In the first table we inserted the set X₁ (of n₁ keys) using the hash function h and obtained chains (linked lists) of length at most k₁. That is, for every slot j (0 ≤ j < m) the number of keys from X₁ with h(x) = j is at most k₁."
"2. In the second table we inserted the set X₂ (of n₂ keys) with the same hash function h, and every slot has at most k₂ keys from X₂."
"3. In the third table, we insert all keys from X₁ ∪ X₂ in some order. For any slot j, the chain in the third table will contain exactly the keys from X₁ hashing to j and the keys from X₂ hashing to j. Thus, regardless of their order in the chain, the total number of keys in slot j is at most k₁ (from X₁) plus k₂ (from X₂), i.e. at most k₁ + k₂."
4. When performing a search (successful or unsuccessful) one must scan through the chain for the slot corresponding to the hash value of the key being searched. In the worst case—whether the sought key is at the very end of the chain or not present at all—this requires examining at most k₁ + k₂ keys.
"In summary, the worst-case number of keys examined during a search in the third table is at most k₁ + k₂ (more precisely, at most k₁ + k₂ for an unsuccessful search, and at most k₁ + k₂ − 1 for a successful search if the key is last, but the simple bound k₁ + k₂ is both non‐asymptotic and as tight as possible under the given conditions)."
