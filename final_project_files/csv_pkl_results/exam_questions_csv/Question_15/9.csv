"Question: We insert a set of elements \( X_1 \) of size \( n_1 \) into a hashing table of size \( m \) using the chaining method with the hashing function \( h \). All the linked lists formed in this table had a length of at most \( k_1 \). We then insert a second set of elements \( X_2 \) of size \( n_2 \) into another hashing table of size \( m \), also using the chaining method with the same hashing function \( h \). The linked lists formed in this table had a length of at most \( k_2 \). Finally, we insert all the elements of \( X_1 \) and \( X_2 \), in some order, into a third hashing table of size \( m \), again using the chaining method and the same hashing function \( h \). Provide a non-asymptotic bound, as tight as possible, on the number of keys that will be examined during a search operation (whether successful or unsuccessful) in the third hashing table."
"3o-mini: We can show that no matter what order the keys from X₁ and X₂ are inserted into the third table, every chain in the table will have at most k₁ + k₂ keys. (In chaining, ""chain"" simply means the linked list in one slot.)"
Here is a brief explanation:
"1. In the first table, the keys in X₁ are inserted and the longest chain that ever appears has length at most k₁. This tells us that for every slot j (where 0 ≤ j < m), at most k₁ of the keys from X₁ hash to j."
"2. Similarly, in the second table, every slot contains at most k₂ keys from X₂."
"3. Now, when you insert all of X₁ ∪ X₂ into the third table (using the same hash function h), every key still goes to the same slot that it did in the corresponding earlier table. Thus, the chain at any slot j in the third table will consist of (at most) the keys from X₁ that landed there (at most k₁ of these) and the keys from X₂ that landed there (at most k₂). In total, every chain will have at most k₁ + k₂ keys."
"When you perform a search operation (successful or unsuccessful) in a hash table that uses chaining, you examine all the keys in the corresponding linked list (or until you find the key if the search is successful). Therefore, regardless of whether the search is for an element that is present (and happens to be at the very end of its chain) or for an element that is not present, the worst-case number of keys examined in the chain is bounded above by the chain’s length."
"Consequently, the worst-case (non-asymptotic) bound on the number of keys examined during a search in the third table is at most k₁ + k₂."
To summarize:
"• For an unsuccessful search, one must inspect every key in the chain. Since the chain has at most k₁ + k₂ keys, at most k₁ + k₂ comparisons are made."
"• For a successful search, even in the worst-case scenario where the searched key is last in its chain, the number of keys examined does not exceed k₁ + k₂."
"Thus, the answer is: In the third hashing table, any search (successful or unsuccessful) will examine at most k₁ + k₂ keys."
